{"errors": [{"code": 2, "level": "warn", "message": "Other syntax error at line insecure-chart/templates/insecure-app-js.yaml:40:\n (approximate error location; error nearby after) error calling parser: did not find expected key character 0 position 0 returned: 0", "path": "insecure-chart/templates/insecure-app-js.yaml", "type": "Other syntax error"}, {"code": 3, "level": "warn", "message": "Syntax error at line insecure-java/gradlew:72:\n `APP_HOME=${app_path%\"${app_path##*/}\"}  # leaves a trailing /; empty if no leading path\n` was unexpected", "path": "insecure-java/gradlew", "spans": [{"end": {"col": 93, "line": 72, "offset": 88}, "file": "insecure-java/gradlew", "start": {"col": 5, "line": 72, "offset": 0}}, {"end": {"col": 15, "line": 178, "offset": 10}, "file": "insecure-java/gradlew", "start": {"col": 5, "line": 178, "offset": 0}}], "type": ["PartialParsing", [{"end": {"col": 93, "line": 72, "offset": 88}, "path": "insecure-java/gradlew", "start": {"col": 5, "line": 72, "offset": 0}}, {"end": {"col": 15, "line": 178, "offset": 10}, "path": "insecure-java/gradlew", "start": {"col": 5, "line": 178, "offset": 0}}]]}, {"code": 3, "level": "warn", "message": "Syntax error at line insecure-app/Dockerfile:26:\n `-m` was unexpected", "path": "insecure-app/Dockerfile", "spans": [{"end": {"col": 15, "line": 26, "offset": 2}, "file": "insecure-app/Dockerfile", "start": {"col": 13, "line": 26, "offset": 0}}, {"end": {"col": 45, "line": 26, "offset": 17}, "file": "insecure-app/Dockerfile", "start": {"col": 28, "line": 26, "offset": 0}}], "type": ["PartialParsing", [{"end": {"col": 15, "line": 26, "offset": 2}, "path": "insecure-app/Dockerfile", "start": {"col": 13, "line": 26, "offset": 0}}, {"end": {"col": 45, "line": 26, "offset": 17}, "path": "insecure-app/Dockerfile", "start": {"col": 28, "line": 26, "offset": 0}}]]}], "interfile_languages_used": [], "paths": {"scanned": [".dryrunsecurity.yaml", ".env", ".github/workflows/amplify.yml", ".github/workflows/pixee.yml", ".github/workflows/publish-insecure.yml", ".gitignore", ".gitmodules", "CODEOWNERS", "README.md", "insecure-app/Dockerfile", "insecure-app/app.py", "insecure-app/bom.json", "insecure-app/init_db.py", "insecure-app/ransomware.py", "insecure-app/requirements.txt", "insecure-app/snyk.sarif", "insecure-app/tutorial.db", "insecure-chart/.helmignore", "insecure-chart/Chart.yaml", "insecure-chart/templates/busybox.yaml", "insecure-chart/templates/insecure-app-js.yaml", "insecure-chart/templates/insecure-app.yaml", "insecure-chart/templates/workload-security-evaluator.yaml", "insecure-chart/terraform.tfstate", "insecure-chart/values.yaml", "insecure-java/.gitignore", "insecure-java/Dockerfile", "insecure-java/Exploit.java", "insecure-java/README.md", "insecure-java/build.gradle", "insecure-java/gradle/wrapper/gradle-wrapper.jar", "insecure-java/gradle/wrapper/gradle-wrapper.properties", "insecure-java/gradlew", "insecure-java/gradlew.bat", "insecure-java/settings.gradle", "insecure-java/src/main/java/com/example/insecurejava/InsecureJavaApplication.java", "insecure-java/src/main/java/com/example/insecurejava/UnsafeDeserializationController.java", "insecure-java/src/main/resources/application.properties", "insecure-js/Dockerfile", "insecure-js/init_db.js", "insecure-js/package-lock.json", "insecure-js/package.json", "insecure-js/server.js", "insecure-js/snyk.sarif", "llm-testing/llm-testing.py", "llm-testing/openai-test.py", "terraform/main.tf", "terraform/outputs.tf", "terraform/terraform.tf", "terraform/variables.tf", "workload-security-evaluator/Dockerfile", "workload-security-evaluator/LICENSE", "workload-security-evaluator/LICENSE-3rdparty.csv", "workload-security-evaluator/NOTICE", "workload-security-evaluator/README.md", "workload-security-evaluator/docker-compose.yaml", "workload-security-evaluator/notrelevant.md", "workload-security-evaluator/notrelevant_layer.json"]}, "results": [{"check_id": "dockerfile.security.missing-user.missing-user", "end": {"col": 31, "line": 34, "offset": 1078}, "extra": {"engine_kind": "OSS", "fingerprint": "af5e9dedee89e966f4a977ada65c8cf6eddc2c5c8bd31c9d5e6ade032a2f62b150ebe50e2f3aa6796806d4881ee2ded63e7cdf7b427f3a98e24a6dde432ad2ef_0", "fix": "USER non-root\nCMD [\"python3\", \"/app/app.py\"]", "is_ignored": false, "lines": "CMD [\"python3\", \"/app/app.py\"]", "message": "By not specifying a USER, a program in the container may run as 'root'. This is a security hazard. If an attacker can control a process running as root, they may have control over the container. Ensure that the last USER in a Dockerfile is a USER other than 'root'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-269: Improper Privilege Management"], "impact": "MEDIUM", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A04:2021 - Insecure Design"], "references": ["https://owasp.org/Top10/A04_2021-Insecure_Design"], "semgrep.dev": {"rule": {"origin": "community", "r_id": 20148, "rule_id": "AbUN06", "rv_id": 928286, "url": "https://semgrep.dev/playground/r/0bTpAQq/dockerfile.security.missing-user.missing-user", "version_id": "0bTpAQq"}}, "shortlink": "https://sg.run/Gbvn", "source": "https://semgrep.dev/r/dockerfile.security.missing-user.missing-user", "subcategory": ["audit"], "technology": ["dockerfile"], "vulnerability_class": ["Improper Authorization"]}, "metavars": {"$...VARS": {"abstract_content": "[\"python3\"\"/app/app.py\"]", "end": {"col": 31, "line": 34, "offset": 1078}, "start": {"col": 5, "line": 34, "offset": 1052}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "insecure-app/Dockerfile", "start": {"col": 1, "line": 34, "offset": 1048}}, {"check_id": "generic.secrets.security.detected-aws-access-key-id-value.detected-aws-access-key-id-value", "end": {"col": 42, "line": 9, "offset": 251}, "extra": {"engine_kind": "OSS", "fingerprint": "892f89afd53ea85da48c96befb7a856343567d35c775f901480c221b6b048d9ece1928a7cceeedc1d30e8d7c762a4c2f7730d46151e699a477824161b3859c88_0", "is_ignored": false, "lines": "aws_access_key_id = '********************'", "message": "AWS Access Key ID Value detected. This is a sensitive credential and should not be hardcoded here. Instead, read this value from an environment variable or keep it in a separate, private file.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-798: Use of Hard-coded Credentials"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A07:2021 - Identification and Authentication Failures"], "references": ["https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures"], "semgrep.dev": {"rule": {"origin": "community", "r_id": 9048, "rule_id": "oqUevO", "rv_id": 833757, "url": "https://semgrep.dev/playground/r/GxTDEyv/generic.secrets.security.detected-aws-access-key-id-value.detected-aws-access-key-id-value", "version_id": "GxTDEyv"}}, "shortlink": "https://sg.run/GeD1", "source": "https://semgrep.dev/r/generic.secrets.security.detected-aws-access-key-id-value.detected-aws-access-key-id-value", "source-rule-url": "https://github.com/grab/secret-scanner/blob/master/scanner/signatures/pattern.go", "subcategory": ["audit"], "technology": ["secrets", "aws"], "vulnerability_class": ["Hard-coded Secrets"]}, "metavars": {"$1": {"abstract_content": "AKIA", "end": {"col": 26, "line": 9, "offset": 235}, "start": {"col": 22, "line": 9, "offset": 231}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "insecure-app/app.py", "start": {"col": 22, "line": 9, "offset": 231}}, {"check_id": "generic.secrets.security.detected-aws-secret-access-key.detected-aws-secret-access-key", "end": {"col": 56, "line": 10, "offset": 308}, "extra": {"engine_kind": "OSS", "fingerprint": "13e25a7e818f3f0cd4c3ad50c3011eb98a0974336fb4790385234062c218c6931f0323eb80fe101996bebcadbae4de0f7ee5fc03f90632544d2c701619374ab0_0", "is_ignored": false, "lines": "aws_secret = '****************************************'", "message": "AWS Secret Access Key detected", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-798: Use of Hard-coded Credentials"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A07:2021 - Identification and Authentication Failures"], "references": ["https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures"], "semgrep.dev": {"rule": {"origin": "community", "r_id": 9051, "rule_id": "2ZUbe8", "rv_id": 833760, "url": "https://semgrep.dev/playground/r/BjTe05N/generic.secrets.security.detected-aws-secret-access-key.detected-aws-secret-access-key", "version_id": "BjTe05N"}}, "shortlink": "https://sg.run/Bk39", "source": "https://semgrep.dev/r/generic.secrets.security.detected-aws-secret-access-key.detected-aws-secret-access-key", "source-rule-url": "https://github.com/grab/secret-scanner/blob/master/scanner/signatures/pattern.go", "subcategory": ["audit"], "technology": ["secrets", "aws"], "vulnerability_class": ["Hard-coded Secrets"]}, "metavars": {"$1": {"abstract_content": "aws_secret = 'v5xpjkWYoy45fGKFSMajSn+sqs22WI2niacX9yO5'", "end": {"col": 56, "line": 10, "offset": 308}, "start": {"col": 1, "line": 10, "offset": 253}}, "$3": {"abstract_content": "aws", "end": {"col": 4, "line": 10, "offset": 256}, "start": {"col": 1, "line": 10, "offset": 253}}, "$4": {"abstract_content": "secret", "end": {"col": 11, "line": 10, "offset": 263}, "start": {"col": 5, "line": 10, "offset": 257}}, "$6": {"abstract_content": "=", "end": {"col": 13, "line": 10, "offset": 265}, "start": {"col": 12, "line": 10, "offset": 264}}, "$7": {"abstract_content": "'", "end": {"col": 15, "line": 10, "offset": 267}, "start": {"col": 14, "line": 10, "offset": 266}}, "$8": {"abstract_content": "'", "end": {"col": 56, "line": 10, "offset": 308}, "start": {"col": 55, "line": 10, "offset": 307}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "insecure-app/app.py", "start": {"col": 1, "line": 10, "offset": 253}}, {"check_id": "python.lang.security.audit.formatted-sql-query.formatted-sql-query", "end": {"col": 111, "line": 23, "offset": 647}, "extra": {"engine_kind": "OSS", "fingerprint": "bd3ed91c83ee049b51adf30ea5466f1461a8ff279db4115fdc50481292f4bd5a7eb1d0a541c81817dcba1091d202020a2ad429adad88ba47bf95ae3de09dc82e_0", "is_ignored": false, "lines": "        cursor.execute(\"SELECT * FROM users WHERE username = '%s' AND password = '%s'\" % (username, password))", "message": "Detected possible formatted SQL query. Use parameterized queries instead.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://stackoverflow.com/questions/775296/mysql-parameterized-queries"], "semgrep.dev": {"rule": {"origin": "community", "r_id": 9637, "rule_id": "3qUP9k", "rv_id": 834610, "url": "https://semgrep.dev/playground/r/RGTKxg9/python.lang.security.audit.formatted-sql-query.formatted-sql-query", "version_id": "RGTKxg9"}}, "shortlink": "https://sg.run/EkWw", "source": "https://semgrep.dev/r/python.lang.security.audit.formatted-sql-query.formatted-sql-query", "subcategory": ["audit"], "technology": ["python"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$DB": {"abstract_content": "cursor", "end": {"col": 15, "line": 23, "offset": 551}, "propagated_value": {"svalue_abstract_content": "db.cursor()", "svalue_end": {"col": 25, "line": 19, "offset": 491}, "svalue_start": {"col": 14, "line": 19, "offset": 480}}, "start": {"col": 9, "line": 23, "offset": 545}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "insecure-app/app.py", "start": {"col": 9, "line": 23, "offset": 545}}, {"check_id": "python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query", "end": {"col": 111, "line": 23, "offset": 647}, "extra": {"engine_kind": "OSS", "fingerprint": "1fb224609ca4d43b11a045658892258157b1de945c0814280f9f46badbd9f5400b93a2859da72a325226c083771a13fcd20474bff7e1efb084d3f2c0d8debc09_0", "is_ignored": false, "lines": "        cursor.execute(\"SELECT * FROM users WHERE username = '%s' AND password = '%s'\" % (username, password))", "message": "Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-textual-sql", "https://www.tutorialspoint.com/sqlalchemy/sqlalchemy_quick_guide.htm", "https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-more-specific-text-with-table-expression-literal-column-and-expression-column"], "semgrep.dev": {"rule": {"origin": "community", "r_id": 10563, "rule_id": "oqUz5y", "rv_id": 904977, "url": "https://semgrep.dev/playground/r/2KTdkwe/python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query", "version_id": "2KTdkwe"}}, "shortlink": "https://sg.run/2b1L", "source": "https://semgrep.dev/r/python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query", "subcategory": ["audit"], "technology": ["sqlalchemy"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$CONNECTION": {"abstract_content": "cursor", "end": {"col": 15, "line": 23, "offset": 551}, "propagated_value": {"svalue_abstract_content": "db.cursor()", "svalue_end": {"col": 25, "line": 19, "offset": 491}, "svalue_start": {"col": 14, "line": 19, "offset": 480}}, "start": {"col": 9, "line": 23, "offset": 545}}, "$SQL": {"abstract_content": "\"SELECT * FROM users WHERE username = '%s' AND password = '%s'\"", "end": {"col": 87, "line": 23, "offset": 623}, "start": {"col": 24, "line": 23, "offset": 560}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "insecure-app/app.py", "start": {"col": 9, "line": 23, "offset": 545}}, {"check_id": "python.flask.security.injection.subprocess-injection.subprocess-injection", "end": {"col": 104, "line": 31, "offset": 922}, "extra": {"dataflow_trace": {"intermediate_vars": [{"content": "cmd", "location": {"end": {"col": 16, "line": 30, "offset": 792}, "path": "insecure-app/app.py", "start": {"col": 13, "line": 30, "offset": 789}}}], "taint_sink": ["CliLoc", [{"end": {"col": 104, "line": 31, "offset": 922}, "path": "insecure-app/app.py", "start": {"col": 23, "line": 31, "offset": 841}}, "subprocess.Popen(cmd, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)"]], "taint_source": ["CliLoc", [{"end": {"col": 42, "line": 30, "offset": 818}, "path": "insecure-app/app.py", "start": {"col": 19, "line": 30, "offset": 795}}, "request.form['command']"]]}, "engine_kind": "OSS", "fingerprint": "3c4c4959625cb597aa8cf78e5feb44e5b02a16808ab6755551da9a678a7d7b2fb68b312e92a7f8368402331a094719ba4a2599894b5384ffd4d059c82b08374f_0", "is_ignored": false, "lines": "            process = subprocess.Popen(cmd, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)", "message": "Detected user input entering a `subprocess` call unsafely. This could result in a command injection vulnerability. An attacker could use this vulnerability to execute arbitrary commands on the host, which allows them to download malware, scan sensitive data, or run any command they wish on the server. Do not let users choose the command to run. In general, prefer to use Python API versions of system commands. If you must use subprocess, use a dictionary to allowlist a set of commands.", "metadata": {"category": "security", "confidence": "HIGH", "cwe": ["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "HIGH", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://semgrep.dev/docs/cheat-sheets/python-command-injection/"], "semgrep.dev": {"rule": {"origin": "community", "r_id": 31147, "rule_id": "8GU3qp", "rv_id": 834493, "url": "https://semgrep.dev/playground/r/vdTOQY7/python.flask.security.injection.subprocess-injection.subprocess-injection", "version_id": "vdTOQY7"}}, "shortlink": "https://sg.run/5gW3", "source": "https://semgrep.dev/r/python.flask.security.injection.subprocess-injection.subprocess-injection", "subcategory": ["vuln"], "technology": ["flask"], "vulnerability_class": ["Command Injection"]}, "metavars": {"$FUNC": {"abstract_content": "Popen", "end": {"col": 39, "line": 31, "offset": 857}, "start": {"col": 34, "line": 31, "offset": 852}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "insecure-app/app.py", "start": {"col": 23, "line": 31, "offset": 841}}, {"check_id": "python.flask.os.tainted-os-command-stdlib-flask-secure-if-array.tainted-os-command-stdlib-flask-secure-if-array", "end": {"col": 43, "line": 31, "offset": 861}, "extra": {"dataflow_trace": {"intermediate_vars": [{"content": "cmd", "location": {"end": {"col": 16, "line": 30, "offset": 792}, "path": "insecure-app/app.py", "start": {"col": 13, "line": 30, "offset": 789}}}], "taint_sink": ["CliLoc", [{"end": {"col": 43, "line": 31, "offset": 861}, "path": "insecure-app/app.py", "start": {"col": 40, "line": 31, "offset": 858}}, "cmd"]], "taint_source": ["CliLoc", [{"end": {"col": 42, "line": 30, "offset": 818}, "path": "insecure-app/app.py", "start": {"col": 19, "line": 30, "offset": 795}}, "request.form['command']"]]}, "engine_kind": "OSS", "fingerprint": "11ab4317b1cc9c256e619e6eca976181caf7c7671e75dde752d0e6b5191147c9ee4983369ccb7414b693729c0b958333f0472b9b723e59e30443c9b145f7e7e8_0", "is_ignored": false, "lines": "            process = subprocess.Popen(cmd, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)", "message": "Untrusted input might be injected into a command executed by the application, which can lead to a command injection vulnerability. An attacker can execute arbitrary commands, potentially gaining complete control of the system. To prevent this vulnerability, avoid executing OS commands with user input. If this is unavoidable, validate and sanitize the input, and use safe methods for executing the commands.", "metadata": {"category": "security", "confidence": "HIGH", "cwe": ["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"], "cwe2020-top25": true, "cwe2021-top25": true, "cwe2022-top25": true, "display-name": "OS Command Injection with Flask", "functional-categories": ["os::sink::os-command-or-thread::commands", "os::sink::os-command-or-thread::os", "os::sink::os-command-or-thread::popen2", "os::sink::os-command-or-thread::stdlib", "os::sink::os-command-or-thread::stdlib2", "os::sink::os-command-or-thread::stdlib3", "os::sink::os-command-or-thread::subprocess", "web::source::cookie::flask", "web::source::form-data::flask", "web::source::form-data::flask-wtf", "web::source::form-data::wtforms", "web::source::header::flask", "web::source::http-body::flask", "web::source::http-params::flask", "web::source::url-path-params::flask"], "impact": "HIGH", "license": "Copyright 2023 Semgrep, Inc.", "likelihood": "MEDIUM", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://docs.python.org/3/library/os.html", "https://docs.python.org/3/library/subprocess.html#subprocess.Popen", "https://owasp.org/Top10/A03_2021-Injection", "https://semgrep.dev/docs/cheat-sheets/python-command-injection/", "https://stackless.readthedocs.io/en/v2.7.16-slp/library/commands.html"], "semgrep.dev": {"rule": {"origin": "pro_rules", "r_id": 139670, "rule_id": "PeUJ9BR", "rv_id": 924531, "url": "https://semgrep.dev/playground/r/nWTnRD8/python.flask.os.tainted-os-command-stdlib-flask-secure-if-array.tainted-os-command-stdlib-flask-secure-if-array", "version_id": "nWTnRD8"}}, "shortlink": "https://sg.run/bwjrP", "source": "https://semgrep.dev/r/python.flask.os.tainted-os-command-stdlib-flask-secure-if-array.tainted-os-command-stdlib-flask-secure-if-array", "subcategory": ["vuln"], "technology": ["commands", "flask", "flask-wtf", "os", "popen2", "stdlib", "stdlib2", "stdlib3", "subprocess", "web", "wtforms"], "vulnerability_class": ["Command Injection"]}, "metavars": {"$1": {"abstract_content": "form", "end": {"col": 5, "line": 1, "offset": 4}, "start": {"col": 1, "line": 1, "offset": 0}}, "$PROPERTY": {"abstract_content": "form", "end": {"col": 31, "line": 30, "offset": 807}, "start": {"col": 27, "line": 30, "offset": 803}}, "$SINK": {"abstract_content": "cmd", "end": {"col": 43, "line": 31, "offset": 861}, "propagated_value": {"svalue_abstract_content": "request.form['command']", "svalue_end": {"col": 42, "line": 30, "offset": 818}, "svalue_start": {"col": 19, "line": 30, "offset": 795}}, "start": {"col": 40, "line": 31, "offset": 858}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "insecure-app/app.py", "start": {"col": 40, "line": 31, "offset": 858}}, {"check_id": "python.lang.security.dangerous-subprocess-use.dangerous-subprocess-use", "end": {"col": 43, "line": 31, "offset": 861}, "extra": {"dataflow_trace": {"intermediate_vars": [{"content": "cmd", "location": {"end": {"col": 16, "line": 30, "offset": 792}, "path": "insecure-app/app.py", "start": {"col": 13, "line": 30, "offset": 789}}}], "taint_sink": ["CliLoc", [{"end": {"col": 43, "line": 31, "offset": 861}, "path": "insecure-app/app.py", "start": {"col": 40, "line": 31, "offset": 858}}, "cmd"]], "taint_source": ["CliLoc", [{"end": {"col": 42, "line": 30, "offset": 818}, "path": "insecure-app/app.py", "start": {"col": 19, "line": 30, "offset": 795}}, "request.form['command']"]]}, "engine_kind": "OSS", "fingerprint": "6f0e63c619f951b4450d30c3b6e9d0078a540b139173b9dd62a26b4bb030219ef3541aaa9b1718d5ffecedd92bd4a6d528d14f1d3b12995cf0bcedd09a4bacf0_0", "is_ignored": false, "lines": "            process = subprocess.Popen(cmd, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)", "message": "Detected subprocess function 'Popen' with user controlled data. A malicious actor could leverage this to perform command injection. You may consider using 'shlex.escape()'.", "metadata": {"asvs": {"control_id": "5.3.8 OS Command Injection", "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v53-output-encoding-and-injection-prevention-requirements", "section": "V5: Validation, Sanitization and Encoding Verification Requirements", "version": "4"}, "category": "security", "confidence": "MEDIUM", "cwe": ["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "MEDIUM", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://stackoverflow.com/questions/3172470/actual-meaning-of-shell-true-in-subprocess", "https://docs.python.org/3/library/subprocess.html", "https://docs.python.org/3/library/shlex.html", "https://semgrep.dev/docs/cheat-sheets/python-command-injection/"], "semgrep.dev": {"rule": {"origin": "community", "r_id": 27271, "rule_id": "JDUz3R", "rv_id": 834659, "url": "https://semgrep.dev/playground/r/0bTw3E0/python.lang.security.dangerous-subprocess-use.dangerous-subprocess-use", "version_id": "0bTw3E0"}}, "shortlink": "https://sg.run/NWxp", "source": "https://semgrep.dev/r/python.lang.security.dangerous-subprocess-use.dangerous-subprocess-use", "subcategory": ["vuln"], "technology": ["python"], "vulnerability_class": ["Command Injection"]}, "metavars": {"$CMD": {"abstract_content": "cmd", "end": {"col": 43, "line": 31, "offset": 861}, "propagated_value": {"svalue_abstract_content": "request.form['command']", "svalue_end": {"col": 42, "line": 30, "offset": 818}, "svalue_start": {"col": 19, "line": 30, "offset": 795}}, "start": {"col": 40, "line": 31, "offset": 858}}, "$FUNC": {"abstract_content": "Popen", "end": {"col": 39, "line": 31, "offset": 857}, "start": {"col": 34, "line": 31, "offset": 852}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "insecure-app/app.py", "start": {"col": 40, "line": 31, "offset": 858}}, {"check_id": "python.lang.security.audit.subprocess-shell-true.subprocess-shell-true", "end": {"col": 55, "line": 31, "offset": 873}, "extra": {"engine_kind": "OSS", "fingerprint": "67b3f01781e5320338a679e28d25eb74a0afbdff9a8e8bf3e384dec075532a176d5d3a10c438e7756a4e38cd767938cdc9fef681fde2f488e574fd027b27a5f2_0", "fix": "False", "is_ignored": false, "lines": "            process = subprocess.Popen(cmd, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)", "message": "Found 'subprocess' function 'Popen' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "LOW", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "HIGH", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://stackoverflow.com/questions/3172470/actual-meaning-of-shell-true-in-subprocess", "https://docs.python.org/3/library/subprocess.html"], "semgrep.dev": {"rule": {"origin": "community", "r_id": 9646, "rule_id": "DbUpz2", "rv_id": 834650, "url": "https://semgrep.dev/playground/r/PkTxGkR/python.lang.security.audit.subprocess-shell-true.subprocess-shell-true", "version_id": "PkTxGkR"}}, "shortlink": "https://sg.run/J92w", "source": "https://semgrep.dev/r/python.lang.security.audit.subprocess-shell-true.subprocess-shell-true", "source-rule-url": "https://bandit.readthedocs.io/en/latest/plugins/b602_subprocess_popen_with_shell_equals_true.html", "subcategory": ["secure default"], "technology": ["python"], "vulnerability_class": ["Command Injection"]}, "metavars": {"$FUNC": {"abstract_content": "Popen", "end": {"col": 39, "line": 31, "offset": 857}, "start": {"col": 34, "line": 31, "offset": 852}}, "$TRUE": {"abstract_content": "True", "end": {"col": 55, "line": 31, "offset": 873}, "start": {"col": 51, "line": 31, "offset": 869}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "insecure-app/app.py", "start": {"col": 51, "line": 31, "offset": 869}}, {"check_id": "python.django.security.injection.sql.sql-injection-using-db-cursor-execute.sql-injection-db-cursor-execute", "end": {"col": 43, "line": 58, "offset": 2133}, "extra": {"engine_kind": "OSS", "fingerprint": "b35bc65f56ad96a3e7dd4426467722cfb9fa4098152b35bfcb26998d73f364cccec3bc08fb082f6ea9c665dc2e40f5ee544cce5e89249b6b6d5542f95968849e_0", "is_ignored": false, "lines": "            sql = request.form['sql']\n            try:\n                # Execute the user's SQL query\n                cursor.execute(sql)\n                # Fetch all rows from the query result\n                rows = cursor.fetchall()\n                # Format the results for display\n                if rows:\n                    output = \"Results:\\n\" + \"\\n\".join(str(row) for row in rows)\n                else:\n                    output = \"Query executed successfully, but no results found.\"\n            except Exception as e:\n                output = f\"SQL Error: {e}\"", "message": "User-controlled data from a request is passed to 'execute()'. This could lead to a SQL injection and therefore protected information could be leaked. Instead, use django's QuerySets, which are built with query parameterization and therefore not vulnerable to sql injection. For example, you could use `Entry.objects.filter(date=2006)`.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "MEDIUM", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://docs.djangoproject.com/en/3.0/topics/security/#sql-injection-protection"], "semgrep.dev": {"rule": {"origin": "community", "r_id": 9512, "rule_id": "2ZUbDL", "rv_id": 834453, "url": "https://semgrep.dev/playground/r/A8T3lj2/python.django.security.injection.sql.sql-injection-using-db-cursor-execute.sql-injection-db-cursor-execute", "version_id": "A8T3lj2"}}, "shortlink": "https://sg.run/qx7y", "source": "https://semgrep.dev/r/python.django.security.injection.sql.sql-injection-using-db-cursor-execute.sql-injection-db-cursor-execute", "subcategory": ["vuln"], "technology": ["django"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$CURSOR": {"abstract_content": "cursor", "end": {"col": 23, "line": 49, "offset": 1688}, "start": {"col": 17, "line": 49, "offset": 1682}}, "$DATA": {"abstract_content": "sql", "end": {"col": 16, "line": 46, "offset": 1579}, "start": {"col": 13, "line": 46, "offset": 1576}}, "$FUNC": {"abstract_content": "index", "end": {"col": 10, "line": 15, "offset": 383}, "start": {"col": 5, "line": 15, "offset": 378}}, "$W": {"abstract_content": "form", "end": {"col": 31, "line": 46, "offset": 1594}, "start": {"col": 27, "line": 46, "offset": 1590}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "insecure-app/app.py", "start": {"col": 13, "line": 46, "offset": 1576}}, {"check_id": "python.flask.db.generic-sql-flask.generic-sql-flask", "end": {"col": 35, "line": 49, "offset": 1700}, "extra": {"dataflow_trace": {"intermediate_vars": [{"content": "sql", "location": {"end": {"col": 16, "line": 46, "offset": 1579}, "path": "insecure-app/app.py", "start": {"col": 13, "line": 46, "offset": 1576}}}], "taint_sink": ["CliLoc", [{"end": {"col": 35, "line": 49, "offset": 1700}, "path": "insecure-app/app.py", "start": {"col": 32, "line": 49, "offset": 1697}}, "sql"]], "taint_source": ["CliLoc", [{"end": {"col": 38, "line": 46, "offset": 1601}, "path": "insecure-app/app.py", "start": {"col": 19, "line": 46, "offset": 1582}}, "request.form['sql']"]]}, "engine_kind": "OSS", "fingerprint": "45f29ae146b3bd34ec3dba49040437a0367c6109b5f020c58ca02551748a3e73c850103ae2374abdaed85b1d8fc26d668175f9a872279dd517cc3f59de3b4e4d_0", "is_ignored": false, "lines": "                cursor.execute(sql)", "message": "Untrusted input might be used to build a database query, which can lead to a SQL injection vulnerability. An attacker can execute malicious SQL statements and gain unauthorized access to sensitive data, modify, delete data, or execute arbitrary system commands. The driver API has the ability to bind parameters to the query in a safe way. Make sure not to dynamically create SQL queries from user-influenced inputs. If you cannot avoid this, either escape the data properly or create an allowlist to check the value.", "metadata": {"category": "security", "confidence": "HIGH", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2020-top25": true, "cwe2021-top25": true, "cwe2022-top25": true, "display-name": "SQL Injection with Flask", "functional-categories": ["db::sink::sql-or-nosql-query::aiomysql", "db::sink::sql-or-nosql-query::aiopg", "db::sink::sql-or-nosql-query::mysql-connector", "db::sink::sql-or-nosql-query::mysqldb", "db::sink::sql-or-nosql-query::pep249", "db::sink::sql-or-nosql-query::psycopg2", "db::sink::sql-or-nosql-query::pymssql", "db::sink::sql-or-nosql-query::pymysql", "db::sink::sql-or-nosql-query::pyodbc", "web::source::cookie::flask", "web::source::form-data::flask", "web::source::form-data::flask-wtf", "web::source::form-data::wtforms", "web::source::header::flask", "web::source::http-body::flask", "web::source::http-params::flask", "web::source::url-path-params::flask"], "impact": "HIGH", "license": "Copyright 2023 Semgrep, Inc.", "likelihood": "HIGH", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "pro_rules", "r_id": 116506, "rule_id": "0oULG2d", "rv_id": 924485, "url": "https://semgrep.dev/playground/r/d6T6WOr/python.flask.db.generic-sql-flask.generic-sql-flask", "version_id": "d6T6WOr"}}, "shortlink": "https://sg.run/AbKXQ", "source": "https://semgrep.dev/r/python.flask.db.generic-sql-flask.generic-sql-flask", "subcategory": ["vuln"], "technology": ["aiomysql", "aiopg", "db-api", "flask", "flask-wtf", "mssql", "mysql", "mysql-connector", "mysqldb", "pep249", "postgres", "psycopg2", "pymssql", "pymysql", "pyodbc", "sql", "web", "wtforms"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "form", "end": {"col": 5, "line": 1, "offset": 4}, "start": {"col": 1, "line": 1, "offset": 0}}, "$AIOMYSQL_CURSOR": {"abstract_content": "cursor", "end": {"col": 23, "line": 49, "offset": 1688}, "start": {"col": 17, "line": 49, "offset": 1682}}, "$PROPERTY": {"abstract_content": "form", "end": {"col": 31, "line": 46, "offset": 1594}, "start": {"col": 27, "line": 46, "offset": 1590}}, "$SINK": {"abstract_content": "sql", "end": {"col": 35, "line": 49, "offset": 1700}, "propagated_value": {"svalue_abstract_content": "request.form['sql']", "svalue_end": {"col": 38, "line": 46, "offset": 1601}, "svalue_start": {"col": 19, "line": 46, "offset": 1582}}, "start": {"col": 32, "line": 49, "offset": 1697}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "insecure-app/app.py", "start": {"col": 32, "line": 49, "offset": 1697}}, {"check_id": "python.django.security.injection.ssrf.ssrf-injection-requests.ssrf-injection-requests", "end": {"col": 44, "line": 83, "offset": 3154}, "extra": {"engine_kind": "OSS", "fingerprint": "fab6dfa09b05c5b55536041ea9183547a03254003da91e929744c051374c388e8d971e3ab4ca41e66fc7d1e22f889877016e2990bf9f711d2be4b13c8bc16fd6_0", "is_ignored": false, "lines": "            url = request.form['url']\n            try:\n                response = requests.get(url)\n                output = f\"SSRF Response: {response.text[:200]}\"\n            except Exception as e:\n                output = f\"SSRF Error: {e}\"", "message": "Data from request object is passed to a new server-side request. This could lead to a server-side request forgery (SSRF). To mitigate, ensure that schemes and hosts are validated against an allowlist, do not forward the response to the user, and ensure proper authentication and transport-layer security in the proxied request. See https://owasp.org/www-community/attacks/Server_Side_Request_Forgery to learn more about SSRF vulnerabilities.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-918: Server-Side Request Forgery (SSRF)"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "MEDIUM", "owasp": ["A10:2021 - Server-Side Request Forgery (SSRF)"], "references": ["https://owasp.org/www-community/attacks/Server_Side_Request_Forgery"], "semgrep.dev": {"rule": {"origin": "community", "r_id": 9514, "rule_id": "j2UvEw", "rv_id": 834455, "url": "https://semgrep.dev/playground/r/DkTGydD/python.django.security.injection.ssrf.ssrf-injection-requests.ssrf-injection-requests", "version_id": "DkTGydD"}}, "shortlink": "https://sg.run/YvY4", "source": "https://semgrep.dev/r/python.django.security.injection.ssrf.ssrf-injection-requests.ssrf-injection-requests", "subcategory": ["vuln"], "technology": ["django"], "vulnerability_class": ["Server-Side Request Forgery (SSRF)"]}, "metavars": {"$DATA": {"abstract_content": "url", "end": {"col": 16, "line": 78, "offset": 2926}, "start": {"col": 13, "line": 78, "offset": 2923}}, "$FUNC": {"abstract_content": "index", "end": {"col": 10, "line": 15, "offset": 383}, "start": {"col": 5, "line": 15, "offset": 378}}, "$METHOD": {"abstract_content": "get", "end": {"col": 40, "line": 80, "offset": 3005}, "start": {"col": 37, "line": 80, "offset": 3002}}, "$W": {"abstract_content": "form", "end": {"col": 31, "line": 78, "offset": 2941}, "start": {"col": 27, "line": 78, "offset": 2937}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "insecure-app/app.py", "start": {"col": 13, "line": 78, "offset": 2923}}, {"check_id": "python.flask.security.injection.ssrf-requests.ssrf-requests", "end": {"col": 45, "line": 80, "offset": 3010}, "extra": {"engine_kind": "OSS", "fingerprint": "4525c51704f25a76ff79dff00f116f744a0ee0e4df50661c6c0076b01455629a344469a5ba828e963fa20f78f9d8c8b632b49623a9ff9ef4ad241a301d1617e5_0", "is_ignored": false, "lines": "                response = requests.get(url)", "message": "Data from request object is passed to a new server-side request. This could lead to a server-side request forgery (SSRF). To mitigate, ensure that schemes and hosts are validated against an allowlist, do not forward the response to the user, and ensure proper authentication and transport-layer security in the proxied request.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-918: Server-Side Request Forgery (SSRF)"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "MEDIUM", "owasp": ["A10:2021 - Server-Side Request Forgery (SSRF)"], "references": ["https://owasp.org/www-community/attacks/Server_Side_Request_Forgery"], "semgrep.dev": {"rule": {"origin": "community", "r_id": 9546, "rule_id": "WAUoRx", "rv_id": 834492, "url": "https://semgrep.dev/playground/r/e1TDK0J/python.flask.security.injection.ssrf-requests.ssrf-requests", "version_id": "e1TDK0J"}}, "shortlink": "https://sg.run/J9LW", "source": "https://semgrep.dev/r/python.flask.security.injection.ssrf-requests.ssrf-requests", "subcategory": ["vuln"], "technology": ["flask"], "vulnerability_class": ["Server-Side Request Forgery (SSRF)"]}, "metavars": {"$FUNC": {"abstract_content": "get", "end": {"col": 40, "line": 80, "offset": 3005}, "start": {"col": 37, "line": 80, "offset": 3002}}, "$INTERM": {"abstract_content": "url", "end": {"col": 16, "line": 78, "offset": 2926}, "start": {"col": 13, "line": 78, "offset": 2923}}, "$W": {"abstract_content": "form", "end": {"col": 31, "line": 78, "offset": 2941}, "start": {"col": 27, "line": 78, "offset": 2937}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "insecure-app/app.py", "start": {"col": 28, "line": 80, "offset": 2993}}, {"check_id": "python.flask.net.tainted-flask-http-request-requests.tainted-flask-http-request-requests", "end": {"col": 44, "line": 80, "offset": 3009}, "extra": {"dataflow_trace": {"intermediate_vars": [{"content": "url", "location": {"end": {"col": 16, "line": 78, "offset": 2926}, "path": "insecure-app/app.py", "start": {"col": 13, "line": 78, "offset": 2923}}}], "taint_sink": ["CliLoc", [{"end": {"col": 44, "line": 80, "offset": 3009}, "path": "insecure-app/app.py", "start": {"col": 41, "line": 80, "offset": 3006}}, "url"]], "taint_source": ["CliLoc", [{"end": {"col": 38, "line": 78, "offset": 2948}, "path": "insecure-app/app.py", "start": {"col": 19, "line": 78, "offset": 2929}}, "request.form['url']"]]}, "engine_kind": "OSS", "fingerprint": "b9ea27fee0799df8f4a4afd40cbd61dccca7c131e69366e582ff71ce00d5e7e990fcb5adf0c4e4656360f9d85e36588e47e177df2cb2e179cb7417e68cdfb5f2_0", "is_ignored": false, "lines": "                response = requests.get(url)", "message": "Untrusted input might be used to build an HTTP request, which can lead to a Server-side request forgery (SSRF) vulnerability. SSRF allows an attacker to send crafted requests from the server side to other internal or external systems. SSRF can lead to unauthorized access to sensitive data and, in some cases, allow the attacker to control applications or systems that trust the vulnerable service. To prevent this vulnerability, avoid allowing user input to craft the base request. Instead, treat it as part of the path or query parameter and encode it appropriately. When user input is necessary to prepare the HTTP request, perform strict input validation. Additionally, whenever possible, use allowlists to only interact with expected, trusted domains.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-918: Server-Side Request Forgery (SSRF)"], "cwe2021-top25": true, "cwe2022-top25": true, "display-name": "Server-Side Request Forgery (SSRF) with Flask", "functional-categories": ["net::sink::http-request::requests", "web::source::cookie::flask", "web::source::form-data::flask", "web::source::form-data::flask-wtf", "web::source::form-data::wtforms", "web::source::header::flask", "web::source::http-body::flask", "web::source::http-params::flask", "web::source::url-path-params::flask"], "impact": "HIGH", "license": "Copyright 2023 Semgrep, Inc.", "likelihood": "MEDIUM", "owasp": ["A10:2021 - Server-Side Request Forgery (SSRF)"], "references": ["https://owasp.org/Top10/A10_2021-Server-Side_Request_Forgery_%28SSRF%29"], "semgrep.dev": {"rule": {"origin": "pro_rules", "r_id": 116522, "rule_id": "bwUbEzL", "rv_id": 924525, "url": "https://semgrep.dev/playground/r/xyTd5l4/python.flask.net.tainted-flask-http-request-requests.tainted-flask-http-request-requests", "version_id": "xyTd5l4"}}, "shortlink": "https://sg.run/109zk", "source": "https://semgrep.dev/r/python.flask.net.tainted-flask-http-request-requests.tainted-flask-http-request-requests", "subcategory": ["vuln"], "technology": ["flask", "flask-wtf", "requests", "web", "wtforms"], "vulnerability_class": ["Server-Side Request Forgery (SSRF)"]}, "metavars": {"$1": {"abstract_content": "form", "end": {"col": 5, "line": 1, "offset": 4}, "start": {"col": 1, "line": 1, "offset": 0}}, "$FUNC": {"abstract_content": "get", "end": {"col": 40, "line": 80, "offset": 3005}, "start": {"col": 37, "line": 80, "offset": 3002}}, "$PROPERTY": {"abstract_content": "form", "end": {"col": 31, "line": 78, "offset": 2941}, "start": {"col": 27, "line": 78, "offset": 2937}}, "$URL": {"abstract_content": "url", "end": {"col": 44, "line": 80, "offset": 3009}, "propagated_value": {"svalue_abstract_content": "request.form['url']", "svalue_end": {"col": 38, "line": 78, "offset": 2948}, "svalue_start": {"col": 19, "line": 78, "offset": 2929}}, "start": {"col": 41, "line": 80, "offset": 3006}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "insecure-app/app.py", "start": {"col": 41, "line": 80, "offset": 3006}}, {"check_id": "python.django.security.injection.sql.sql-injection-using-db-cursor-execute.sql-injection-db-cursor-execute", "end": {"col": 43, "line": 98, "offset": 3811}, "extra": {"engine_kind": "OSS", "fingerprint": "7de13c47abcf430754420a48d341c9be3f7c9616b721a91fad2547e88f3a1ec7f778a8689a2d00e9752f224332372edb09cec074030cc5031feadeaf9c42e487_0", "is_ignored": false, "lines": "            username = request.form['username']\n            try:\n                # Vulnerable SQL query using string interpolation\n                query = \"SELECT password FROM users WHERE username = '{}'\".format(username)\n                cursor.execute(query)\n                result = cursor.fetchone()\n                if result:\n                    output = f\"Password for {username}: {result[0]}\"\n                else:\n                    output = \"User not found.\"\n            except Exception as e:\n                output = f\"SQL Error: {e}\"", "message": "User-controlled data from a request is passed to 'execute()'. This could lead to a SQL injection and therefore protected information could be leaked. Instead, use django's QuerySets, which are built with query parameterization and therefore not vulnerable to sql injection. For example, you could use `Entry.objects.filter(date=2006)`.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "MEDIUM", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://docs.djangoproject.com/en/3.0/topics/security/#sql-injection-protection"], "semgrep.dev": {"rule": {"origin": "community", "r_id": 9512, "rule_id": "2ZUbDL", "rv_id": 834453, "url": "https://semgrep.dev/playground/r/A8T3lj2/python.django.security.injection.sql.sql-injection-using-db-cursor-execute.sql-injection-db-cursor-execute", "version_id": "A8T3lj2"}}, "shortlink": "https://sg.run/qx7y", "source": "https://semgrep.dev/r/python.django.security.injection.sql.sql-injection-using-db-cursor-execute.sql-injection-db-cursor-execute", "subcategory": ["vuln"], "technology": ["django"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$CURSOR": {"abstract_content": "cursor", "end": {"col": 23, "line": 91, "offset": 3510}, "start": {"col": 17, "line": 91, "offset": 3504}}, "$DATA": {"abstract_content": "username", "end": {"col": 21, "line": 87, "offset": 3285}, "start": {"col": 13, "line": 87, "offset": 3277}}, "$FUNC": {"abstract_content": "index", "end": {"col": 10, "line": 15, "offset": 383}, "start": {"col": 5, "line": 15, "offset": 378}}, "$INTERM": {"abstract_content": "query", "end": {"col": 22, "line": 90, "offset": 3417}, "start": {"col": 17, "line": 90, "offset": 3412}}, "$STR": {"abstract_content": "\"SELECT password FROM users WHERE username = '{}'\"", "end": {"col": 75, "line": 90, "offset": 3470}, "start": {"col": 25, "line": 90, "offset": 3420}}, "$W": {"abstract_content": "form", "end": {"col": 36, "line": 87, "offset": 3300}, "start": {"col": 32, "line": 87, "offset": 3296}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "insecure-app/app.py", "start": {"col": 13, "line": 87, "offset": 3277}}, {"check_id": "python.django.security.injection.tainted-sql-string.tainted-sql-string", "end": {"col": 92, "line": 90, "offset": 3487}, "extra": {"dataflow_trace": {"intermediate_vars": [{"content": "username", "location": {"end": {"col": 21, "line": 87, "offset": 3285}, "path": "insecure-app/app.py", "start": {"col": 13, "line": 87, "offset": 3277}}}], "taint_sink": ["CliLoc", [{"end": {"col": 92, "line": 90, "offset": 3487}, "path": "insecure-app/app.py", "start": {"col": 25, "line": 90, "offset": 3420}}, "\"SELECT password FROM users WHERE username = '{}'\".format(username)"]], "taint_source": ["CliLoc", [{"end": {"col": 36, "line": 87, "offset": 3300}, "path": "insecure-app/app.py", "start": {"col": 24, "line": 87, "offset": 3288}}, "request.form"]]}, "engine_kind": "OSS", "fingerprint": "131b5e7e7d2ac6fc49fe8d7468f54e651a09d4a4706cdea3961e2fa888007b16999046aff46b29fadd3e0fa30f6ae43e0b461b4ae3bf39a7323b33e3c32d2ff8_0", "is_ignored": false, "lines": "                query = \"SELECT password FROM users WHERE username = '{}'\".format(username)", "message": "Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using the Django object-relational mappers (ORM) instead of raw SQL queries.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-915: Improperly Controlled Modification of Dynamically-Determined Object Attributes"], "impact": "LOW", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "MEDIUM", "owasp": ["A08:2021 - Software and Data Integrity Failures"], "references": ["https://docs.djangoproject.com/en/3.0/topics/security/#sql-injection-protection"], "semgrep.dev": {"rule": {"origin": "community", "r_id": 14701, "rule_id": "lBU8Ad", "rv_id": 906695, "url": "https://semgrep.dev/playground/r/X0TA1zR/python.django.security.injection.tainted-sql-string.tainted-sql-string", "version_id": "X0TA1zR"}}, "shortlink": "https://sg.run/PbZp", "source": "https://semgrep.dev/r/python.django.security.injection.tainted-sql-string.tainted-sql-string", "subcategory": ["audit"], "technology": ["django"], "vulnerability_class": ["Mass Assignment"]}, "metavars": {"$1": {"abstract_content": "SELECT", "end": {"col": 7, "line": 1, "offset": 6}, "start": {"col": 1, "line": 1, "offset": 0}}, "$ANYTHING": {"abstract_content": "form", "end": {"col": 36, "line": 87, "offset": 3300}, "start": {"col": 32, "line": 87, "offset": 3296}}, "$SQLSTR": {"abstract_content": "SELECT password FROM users WHERE username = '{}'", "end": {"col": 74, "line": 90, "offset": 3469}, "start": {"col": 26, "line": 90, "offset": 3421}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "insecure-app/app.py", "start": {"col": 25, "line": 90, "offset": 3420}}, {"check_id": "python.flask.security.injection.tainted-sql-string.tainted-sql-string", "end": {"col": 92, "line": 90, "offset": 3487}, "extra": {"dataflow_trace": {"intermediate_vars": [{"content": "username", "location": {"end": {"col": 21, "line": 87, "offset": 3285}, "path": "insecure-app/app.py", "start": {"col": 13, "line": 87, "offset": 3277}}}], "taint_sink": ["CliLoc", [{"end": {"col": 92, "line": 90, "offset": 3487}, "path": "insecure-app/app.py", "start": {"col": 25, "line": 90, "offset": 3420}}, "\"SELECT password FROM users WHERE username = '{}'\".format(username)"]], "taint_source": ["CliLoc", [{"end": {"col": 36, "line": 87, "offset": 3300}, "path": "insecure-app/app.py", "start": {"col": 24, "line": 87, "offset": 3288}}, "request.form"]]}, "engine_kind": "OSS", "fingerprint": "d78139633035de6bf1b9a560172a84f789b9ddd923facc66df7a193b8e313841e015366f2216bfa6d2a311380594d28e7b5da825a9eaeabb73bf9613adbdb29d_0", "is_ignored": false, "lines": "                query = \"SELECT password FROM users WHERE username = '{}'\".format(username)", "message": "Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using an object-relational mapper (ORM) such as SQLAlchemy which will protect your queries.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-704: Incorrect Type Conversion or Cast"], "impact": "MEDIUM", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "MEDIUM", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-textual-sql", "https://www.tutorialspoint.com/sqlalchemy/sqlalchemy_quick_guide.htm", "https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-more-specific-text-with-table-expression-literal-column-and-expression-column"], "semgrep.dev": {"rule": {"origin": "community", "r_id": 14702, "rule_id": "YGUDKQ", "rv_id": 834494, "url": "https://semgrep.dev/playground/r/d6TKgrG/python.flask.security.injection.tainted-sql-string.tainted-sql-string", "version_id": "d6TKgrG"}}, "shortlink": "https://sg.run/JxZj", "source": "https://semgrep.dev/r/python.flask.security.injection.tainted-sql-string.tainted-sql-string", "subcategory": ["vuln"], "technology": ["sqlalchemy", "flask"], "vulnerability_class": ["Improper Validation"]}, "metavars": {"$1": {"abstract_content": "SELECT", "end": {"col": 7, "line": 1, "offset": 6}, "start": {"col": 1, "line": 1, "offset": 0}}, "$ANYTHING": {"abstract_content": "form", "end": {"col": 36, "line": 87, "offset": 3300}, "start": {"col": 32, "line": 87, "offset": 3296}}, "$SQLSTR": {"abstract_content": "SELECT password FROM users WHERE username = '{}'", "end": {"col": 74, "line": 90, "offset": 3469}, "start": {"col": 26, "line": 90, "offset": 3421}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "insecure-app/app.py", "start": {"col": 25, "line": 90, "offset": 3420}}, {"check_id": "python.lang.security.audit.formatted-sql-query.formatted-sql-query", "end": {"col": 38, "line": 91, "offset": 3525}, "extra": {"engine_kind": "OSS", "fingerprint": "a74600ac310bdab04cc5ea8c2e7c25221703979f0286dde9018a90d2dbd6c16ea381c5d4f9cb97fbcac0b0aeef454a63c3f82f078d6fa9512358b6566e5263a3_0", "is_ignored": false, "lines": "                cursor.execute(query)", "message": "Detected possible formatted SQL query. Use parameterized queries instead.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://stackoverflow.com/questions/775296/mysql-parameterized-queries"], "semgrep.dev": {"rule": {"origin": "community", "r_id": 9637, "rule_id": "3qUP9k", "rv_id": 834610, "url": "https://semgrep.dev/playground/r/RGTKxg9/python.lang.security.audit.formatted-sql-query.formatted-sql-query", "version_id": "RGTKxg9"}}, "shortlink": "https://sg.run/EkWw", "source": "https://semgrep.dev/r/python.lang.security.audit.formatted-sql-query.formatted-sql-query", "subcategory": ["audit"], "technology": ["python"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$DB": {"abstract_content": "cursor", "end": {"col": 23, "line": 91, "offset": 3510}, "start": {"col": 17, "line": 91, "offset": 3504}}, "$SQL": {"abstract_content": "query", "end": {"col": 37, "line": 91, "offset": 3524}, "propagated_value": {"svalue_abstract_content": "\"SELECT password FROM users WHERE username = '{}'\".format(username)", "svalue_end": {"col": 92, "line": 90, "offset": 3487}, "svalue_start": {"col": 25, "line": 90, "offset": 3420}}, "start": {"col": 32, "line": 91, "offset": 3519}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "insecure-app/app.py", "start": {"col": 17, "line": 91, "offset": 3504}}, {"check_id": "python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query", "end": {"col": 38, "line": 91, "offset": 3525}, "extra": {"engine_kind": "OSS", "fingerprint": "97cb38d9b784f2ccc9d408311b424efd2db86f21a63023679b620bdd2800fa8befdbbd093b704ba25840091646bc7b85382022dc1d4d980c88b5252c8720390a_0", "is_ignored": false, "lines": "                cursor.execute(query)", "message": "Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-textual-sql", "https://www.tutorialspoint.com/sqlalchemy/sqlalchemy_quick_guide.htm", "https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-more-specific-text-with-table-expression-literal-column-and-expression-column"], "semgrep.dev": {"rule": {"origin": "community", "r_id": 10563, "rule_id": "oqUz5y", "rv_id": 904977, "url": "https://semgrep.dev/playground/r/2KTdkwe/python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query", "version_id": "2KTdkwe"}}, "shortlink": "https://sg.run/2b1L", "source": "https://semgrep.dev/r/python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query", "subcategory": ["audit"], "technology": ["sqlalchemy"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$CONNECTION": {"abstract_content": "cursor", "end": {"col": 23, "line": 91, "offset": 3510}, "start": {"col": 17, "line": 91, "offset": 3504}}, "$QUERY": {"abstract_content": "query", "end": {"col": 37, "line": 91, "offset": 3524}, "propagated_value": {"svalue_abstract_content": "\"SELECT password FROM users WHERE username = '{}'\".format(username)", "svalue_end": {"col": 92, "line": 90, "offset": 3487}, "svalue_start": {"col": 25, "line": 90, "offset": 3420}}, "start": {"col": 32, "line": 91, "offset": 3519}}, "$SQL": {"abstract_content": "\"SELECT password FROM users WHERE username = '{}'\"", "end": {"col": 75, "line": 90, "offset": 3470}, "start": {"col": 25, "line": 90, "offset": 3420}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "insecure-app/app.py", "start": {"col": 17, "line": 91, "offset": 3504}}, {"check_id": "python.flask.db.generic-sql-flask.generic-sql-flask", "end": {"col": 37, "line": 91, "offset": 3524}, "extra": {"dataflow_trace": {"intermediate_vars": [{"content": "username", "location": {"end": {"col": 21, "line": 87, "offset": 3285}, "path": "insecure-app/app.py", "start": {"col": 13, "line": 87, "offset": 3277}}}, {"content": "query", "location": {"end": {"col": 22, "line": 90, "offset": 3417}, "path": "insecure-app/app.py", "start": {"col": 17, "line": 90, "offset": 3412}}}], "taint_sink": ["CliLoc", [{"end": {"col": 37, "line": 91, "offset": 3524}, "path": "insecure-app/app.py", "start": {"col": 32, "line": 91, "offset": 3519}}, "query"]], "taint_source": ["CliLoc", [{"end": {"col": 48, "line": 87, "offset": 3312}, "path": "insecure-app/app.py", "start": {"col": 24, "line": 87, "offset": 3288}}, "request.form['username']"]]}, "engine_kind": "OSS", "fingerprint": "a80f7e2b4c23589f94ab602f17de0c81936ee0e90bae9e1716a1ceca152f7466301e0b6af164ffe2e311facac9f4f61b278c6c1c47ef1e2e07fce41c0042a588_0", "is_ignored": false, "lines": "                cursor.execute(query)", "message": "Untrusted input might be used to build a database query, which can lead to a SQL injection vulnerability. An attacker can execute malicious SQL statements and gain unauthorized access to sensitive data, modify, delete data, or execute arbitrary system commands. The driver API has the ability to bind parameters to the query in a safe way. Make sure not to dynamically create SQL queries from user-influenced inputs. If you cannot avoid this, either escape the data properly or create an allowlist to check the value.", "metadata": {"category": "security", "confidence": "HIGH", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2020-top25": true, "cwe2021-top25": true, "cwe2022-top25": true, "display-name": "SQL Injection with Flask", "functional-categories": ["db::sink::sql-or-nosql-query::aiomysql", "db::sink::sql-or-nosql-query::aiopg", "db::sink::sql-or-nosql-query::mysql-connector", "db::sink::sql-or-nosql-query::mysqldb", "db::sink::sql-or-nosql-query::pep249", "db::sink::sql-or-nosql-query::psycopg2", "db::sink::sql-or-nosql-query::pymssql", "db::sink::sql-or-nosql-query::pymysql", "db::sink::sql-or-nosql-query::pyodbc", "web::source::cookie::flask", "web::source::form-data::flask", "web::source::form-data::flask-wtf", "web::source::form-data::wtforms", "web::source::header::flask", "web::source::http-body::flask", "web::source::http-params::flask", "web::source::url-path-params::flask"], "impact": "HIGH", "license": "Copyright 2023 Semgrep, Inc.", "likelihood": "HIGH", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "pro_rules", "r_id": 116506, "rule_id": "0oULG2d", "rv_id": 924485, "url": "https://semgrep.dev/playground/r/d6T6WOr/python.flask.db.generic-sql-flask.generic-sql-flask", "version_id": "d6T6WOr"}}, "shortlink": "https://sg.run/AbKXQ", "source": "https://semgrep.dev/r/python.flask.db.generic-sql-flask.generic-sql-flask", "subcategory": ["vuln"], "technology": ["aiomysql", "aiopg", "db-api", "flask", "flask-wtf", "mssql", "mysql", "mysql-connector", "mysqldb", "pep249", "postgres", "psycopg2", "pymssql", "pymysql", "pyodbc", "sql", "web", "wtforms"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "form", "end": {"col": 5, "line": 1, "offset": 4}, "start": {"col": 1, "line": 1, "offset": 0}}, "$AIOMYSQL_CURSOR": {"abstract_content": "cursor", "end": {"col": 23, "line": 91, "offset": 3510}, "start": {"col": 17, "line": 91, "offset": 3504}}, "$PROPERTY": {"abstract_content": "form", "end": {"col": 36, "line": 87, "offset": 3300}, "start": {"col": 32, "line": 87, "offset": 3296}}, "$SINK": {"abstract_content": "query", "end": {"col": 37, "line": 91, "offset": 3524}, "propagated_value": {"svalue_abstract_content": "\"SELECT password FROM users WHERE username = '{}'\".format(username)", "svalue_end": {"col": 92, "line": 90, "offset": 3487}, "svalue_start": {"col": 25, "line": 90, "offset": 3420}}, "start": {"col": 32, "line": 91, "offset": 3519}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "insecure-app/app.py", "start": {"col": 32, "line": 91, "offset": 3519}}, {"check_id": "python.flask.security.audit.render-template-string.render-template-string", "end": {"col": 24, "line": 165, "offset": 6152}, "extra": {"engine_kind": "OSS", "fingerprint": "1fef9f2ee425958911da7faac417e1f471bdc7ae487cbabd9a91be4ea84a6f83752210264ba5524b467e6c75922346531ffa23e80c7cbb432772b1e9135c7eed_0", "is_ignored": false, "lines": "    return render_template_string(\"\"\"\n        <h1>Intentionally Insecure App</h1>\n        <hr>\n\n        <!-- Command Injection -->\n        <form action=\"/\" method=\"post\">\n            <h2>Command Injection</h2>\n            <input type=\"text\" name=\"command\" value=\"ls -la\">\n            <input type=\"submit\" value=\"Run\">\n        </form>\n        <br>\n\n        <!-- File Upload -->\n        <form action=\"/\" method=\"post\" enctype=\"multipart/form-data\">\n            <h2>Path Traversal via File Upload</h2>\n            <input type=\"file\" name=\"file\">\n            <input type=\"submit\" value=\"Upload\">\n        </form>\n        <p>Try uploading a file named: <code>../../../../etc/passwd</code></p>\n        <br>\n\n        <!-- SQL Injection -->\n        <form action=\"/\" method=\"post\">\n            <h2>SQL Injection</h2>\n            <input type=\"text\" name=\"sql\" value=\"SELECT * FROM users WHERE username = 'admin' OR '1'='1'\">\n            <input type=\"submit\" value=\"Run\">\n        </form>\n        <br>\n\n        <!-- Cross-Site Scripting (XSS) -->\n        <form action=\"/\" method=\"post\">\n            Enter XSS payload: <input type=\"text\" name=\"xss\" value=\"<script>alert('XSS');</script>\">\n            <input type=\"submit\" value=\"Run\">\n        </form>\n        <br>\n\n        <!-- XML External Entity (XXE) Injection -->\n        <form action=\"/\" method=\"post\">\n            <h2>XML External Entity (XXE) Injection</h2>\n            <textarea name=\"xml\" rows=\"5\" cols=\"50\">\n<?xml version=\"1.0\"?>\n<!DOCTYPE root [\n<!ENTITY xxe SYSTEM \"file:///etc/passwd\">\n]>\n<root>&xxe;</root>\n            </textarea>\n            <input type=\"submit\" value=\"Parse XML\">\n        </form>\n        <br>\n\n        <!-- Server-Side Request Forgery (SSRF) -->\n        <form action=\"/\" method=\"post\">\n            <h2>Server-Side Request Forgery (SSRF)</h2>\n            <input type=\"text\" name=\"url\" value=\"http://localhost:8080/\">\n            <input type=\"submit\" value=\"Request\">\n        </form>\n        <br>\n        <!-- SQL Injection 2 -->\n        <h2>SQL Injection 2</h2>\n        <form action=\"/\" method=\"post\">\n            Enter Username: <input type=\"text\" name=\"username\" value=\"' UNION SELECT username || ' : ' || password FROM users --\">\n            <input type=\"submit\" value=\"Lookup\">\n        </form>\n        <hr>\n        <pre>{{ output|safe }}</pre>\n    \"\"\", output=output)", "message": "Found a template created with string formatting. This is susceptible to server-side template injection and cross-site scripting attacks.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-96: Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection')"], "impact": "MEDIUM", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A03:2021 - Injection"], "references": ["https://nvisium.com/blog/2016/03/09/exploring-ssti-in-flask-jinja2.html"], "semgrep.dev": {"rule": {"origin": "community", "r_id": 9540, "rule_id": "5rUOv1", "rv_id": 834480, "url": "https://semgrep.dev/playground/r/X0T5KQJ/python.flask.security.audit.render-template-string.render-template-string", "version_id": "X0T5KQJ"}}, "shortlink": "https://sg.run/8yjE", "source": "https://semgrep.dev/r/python.flask.security.audit.render-template-string.render-template-string", "subcategory": ["audit"], "technology": ["flask"], "vulnerability_class": ["Code Injection"]}, "metavars": {}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "insecure-app/app.py", "start": {"col": 12, "line": 100, "offset": 3824}}, {"check_id": "python.flask.debug.debug-flask.active-debug-code-flask", "end": {"col": 51, "line": 168, "offset": 6231}, "extra": {"engine_kind": "OSS", "fingerprint": "c23e60005fcb1bcebdf227cb9726b160a35d2a257d070ed02e48086267e9fc89bc16c372bb201f498a69977f671255ee8a9f79ff39693f60f42f6b326b1cbef7_0", "is_ignored": false, "lines": "    app.run(host='0.0.0.0', port=8080, debug=True)", "message": "The application is running debug code or has debug mode enabled. This may expose sensitive information, like stack traces and environment variables, to attackers. It may also modify application behavior, potentially enabling attackers to bypass restrictions. To remediate this finding, ensure that the application's debug code and debug mode are disabled or removed from the production environment.", "metadata": {"category": "security", "confidence": "HIGH", "cwe": ["CWE-489: Active Debug Code"], "display-name": "Active Debug Code in Flask", "functional-categories": ["debug::search::active-debug-code"], "impact": "MEDIUM", "license": "Copyright 2023 Semgrep, Inc.", "likelihood": "LOW", "references": ["https://flask.palletsprojects.com/en/3.0.x/debugging/"], "semgrep.dev": {"rule": {"origin": "pro_rules", "r_id": 116513, "rule_id": "zdUKBnK", "rv_id": 924496, "url": "https://semgrep.dev/playground/r/PkTjy71/python.flask.debug.debug-flask.active-debug-code-flask", "version_id": "PkTjy71"}}, "shortlink": "https://sg.run/lBbpB", "source": "https://semgrep.dev/r/python.flask.debug.debug-flask.active-debug-code-flask", "subcategory": ["vuln"], "technology": ["flask", "python"], "vulnerability_class": ["Active Debug Code"]}, "metavars": {}, "severity": "INFO", "validation_state": "NO_VALIDATOR"}, "path": "insecure-app/app.py", "start": {"col": 5, "line": 168, "offset": 6185}}, {"check_id": "python.flask.security.audit.app-run-param-config.avoid_app_run_with_bad_host", "end": {"col": 51, "line": 168, "offset": 6231}, "extra": {"engine_kind": "OSS", "fingerprint": "031046540eb43011ccbcd463edf2c3003737673f6218b7a22e609d94ff6b0ad99d098ec0307291bb508e6c1ec8d7e08ebdbe7f7670245df69c0a42db45854bd3_0", "is_ignored": false, "lines": "    app.run(host='0.0.0.0', port=8080, debug=True)", "message": "Running flask app with host 0.0.0.0 could expose the server publicly.", "metadata": {"category": "security", "confidence": "HIGH", "cwe": ["CWE-668: Exposure of Resource to Wrong Sphere"], "impact": "MEDIUM", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "HIGH", "owasp": ["A01:2021 - Broken Access Control"], "references": ["https://owasp.org/Top10/A01_2021-Broken_Access_Control"], "semgrep.dev": {"rule": {"origin": "community", "r_id": 9532, "rule_id": "L1Uy1n", "rv_id": 834471, "url": "https://semgrep.dev/playground/r/K3TrLvJ/python.flask.security.audit.app-run-param-config.avoid_app_run_with_bad_host", "version_id": "K3TrLvJ"}}, "shortlink": "https://sg.run/eLby", "source": "https://semgrep.dev/r/python.flask.security.audit.app-run-param-config.avoid_app_run_with_bad_host", "subcategory": ["vuln"], "technology": ["flask"], "vulnerability_class": ["Other"]}, "metavars": {}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "insecure-app/app.py", "start": {"col": 5, "line": 168, "offset": 6185}}, {"check_id": "python.flask.security.audit.debug-enabled.debug-enabled", "end": {"col": 51, "line": 168, "offset": 6231}, "extra": {"engine_kind": "OSS", "fingerprint": "688f60f63bb45fb9ddf9a179de37f66efa8644f5976e2115d44c0ee91789446d3bf7d1d4351ea22ab6e616ecb66a2ed26ca94d64746ea41e289bbf71176a4022_0", "is_ignored": false, "lines": "    app.run(host='0.0.0.0', port=8080, debug=True)", "message": "Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables.", "metadata": {"category": "security", "confidence": "HIGH", "cwe": ["CWE-489: Active Debug Code"], "impact": "MEDIUM", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "HIGH", "owasp": "A06:2017 - Security Misconfiguration", "references": ["https://labs.detectify.com/2015/10/02/how-patreon-got-hacked-publicly-exposed-werkzeug-debugger/"], "semgrep.dev": {"rule": {"origin": "community", "r_id": 9534, "rule_id": "gxU1bd", "rv_id": 834473, "url": "https://semgrep.dev/playground/r/l4TyD46/python.flask.security.audit.debug-enabled.debug-enabled", "version_id": "l4TyD46"}}, "shortlink": "https://sg.run/dKrd", "source": "https://semgrep.dev/r/python.flask.security.audit.debug-enabled.debug-enabled", "subcategory": ["vuln"], "technology": ["flask"], "vulnerability_class": ["Active Debug Code"]}, "metavars": {"$APP": {"abstract_content": "app", "end": {"col": 8, "line": 168, "offset": 6188}, "propagated_value": {"svalue_abstract_content": "Flask(__name__)", "svalue_end": {"col": 22, "line": 12, "offset": 331}, "svalue_start": {"col": 7, "line": 12, "offset": 316}}, "start": {"col": 5, "line": 168, "offset": 6185}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "insecure-app/app.py", "start": {"col": 5, "line": 168, "offset": 6185}}, {"check_id": "generic.secrets.security.detected-aws-access-key-id-value.detected-aws-access-key-id-value", "end": {"col": 36, "line": 34, "offset": 1324}, "extra": {"engine_kind": "OSS", "fingerprint": "fdd4bbda379047f46243b39d05251ca1f58d4adf6e262e3e54050a8031935e79a9bed50cdf71107e644efbf18b43f6edcde2cd2905d9bfb43caf67d59f7bcc98_0", "is_ignored": false, "lines": "        aws = \"AKIA2JAPX77RGLB664VE\"", "message": "AWS Access Key ID Value detected. This is a sensitive credential and should not be hardcoded here. Instead, read this value from an environment variable or keep it in a separate, private file.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-798: Use of Hard-coded Credentials"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A07:2021 - Identification and Authentication Failures"], "references": ["https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures"], "semgrep.dev": {"rule": {"origin": "community", "r_id": 9048, "rule_id": "oqUevO", "rv_id": 833757, "url": "https://semgrep.dev/playground/r/GxTDEyv/generic.secrets.security.detected-aws-access-key-id-value.detected-aws-access-key-id-value", "version_id": "GxTDEyv"}}, "shortlink": "https://sg.run/GeD1", "source": "https://semgrep.dev/r/generic.secrets.security.detected-aws-access-key-id-value.detected-aws-access-key-id-value", "source-rule-url": "https://github.com/grab/secret-scanner/blob/master/scanner/signatures/pattern.go", "subcategory": ["audit"], "technology": ["secrets", "aws"], "vulnerability_class": ["Hard-coded Secrets"]}, "metavars": {"$1": {"abstract_content": "AKIA", "end": {"col": 20, "line": 34, "offset": 1308}, "start": {"col": 16, "line": 34, "offset": 1304}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "insecure-app/ransomware.py", "start": {"col": 16, "line": 34, "offset": 1304}}, {"check_id": "python.lang.security.audit.dynamic-urllib-use-detected.dynamic-urllib-use-detected", "end": {"col": 51, "line": 143, "offset": 6522}, "extra": {"engine_kind": "OSS", "fingerprint": "f74fd93d56d0f782bdccefe534a08a0e542f77db7f2e2bd32b3107a3049506b89945891a6570373cd6b214f08cc50198a61a8b4e680dcaadc5cd4dec38437ec0_0", "is_ignored": false, "lines": "        urllib.request.urlretrieve(imageUrl, path)", "message": "Detected a dynamic value being used with urllib. urllib supports 'file://' schemes, so a dynamic value controlled by a malicious actor may allow them to read arbitrary files. Audit uses of urllib calls to ensure user data cannot control the URLs, or consider using the 'requests' library instead.", "metadata": {"asvs": {"control_id": "5.2.4 Dynamic Code Execution Features", "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v52-sanitization-and-sandboxing-requirements", "section": "V5: Validation, Sanitization and Encoding Verification Requirements", "version": "4"}, "bandit-code": "B310", "category": "security", "confidence": "LOW", "cwe": ["CWE-939: Improper Authorization in Handler for Custom URL Scheme"], "impact": "LOW", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": "A01:2017 - Injection", "references": ["https://cwe.mitre.org/data/definitions/939.html"], "semgrep.dev": {"rule": {"origin": "community", "r_id": 9634, "rule_id": "8GUj22", "rv_id": 834607, "url": "https://semgrep.dev/playground/r/JdTlRyk/python.lang.security.audit.dynamic-urllib-use-detected.dynamic-urllib-use-detected", "version_id": "JdTlRyk"}}, "shortlink": "https://sg.run/dKZZ", "source": "https://semgrep.dev/r/python.lang.security.audit.dynamic-urllib-use-detected.dynamic-urllib-use-detected", "source-rule-url": "https://github.com/PyCQA/bandit/blob/b1411bfb43795d3ffd268bef17a839dee954c2b1/bandit/blacklists/calls.py#L163", "subcategory": ["audit"], "technology": ["python"], "vulnerability_class": ["Improper Authorization"]}, "metavars": {}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "insecure-app/ransomware.py", "start": {"col": 9, "line": 143, "offset": 6480}}, {"check_id": "generic.secrets.security.detected-generic-secret.detected-generic-secret", "end": {"col": 77, "line": 1370, "offset": 67246}, "extra": {"engine_kind": "OSS", "fingerprint": "edb833049898a1252e8d30b75b4236428843070ec8820bd4964822bc057b8199612beb28881fa5e59e45e324f13920948dda9bf07f3d5bb35d1386598f336386_0", "is_ignored": false, "lines": "                        \"line\": \"secret = '54efcbaed7f64673bc93b4e28ca9e8b2'\\n\",", "message": "Generic Secret detected", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-798: Use of Hard-coded Credentials"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A07:2021 - Identification and Authentication Failures"], "references": ["https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures"], "semgrep.dev": {"rule": {"origin": "community", "r_id": 9057, "rule_id": "r6Urqe", "rv_id": 833768, "url": "https://semgrep.dev/playground/r/6xTDg3J/generic.secrets.security.detected-generic-secret.detected-generic-secret", "version_id": "6xTDg3J"}}, "shortlink": "https://sg.run/l2o5", "source": "https://semgrep.dev/r/generic.secrets.security.detected-generic-secret.detected-generic-secret", "source-rule-url": "https://github.com/dxa4481/truffleHogRegexes/blob/master/truffleHogRegexes/regexes.json", "subcategory": ["audit"], "technology": ["secrets"], "vulnerability_class": ["Hard-coded Secrets"]}, "metavars": {"$1": {"abstract_content": "54efcbaed7f64673bc93b4e28ca9e8b2", "end": {"col": 76, "line": 1370, "offset": 67245}, "start": {"col": 44, "line": 1370, "offset": 67213}}, "$SECRET": {"abstract_content": "54efcbaed7f64673bc93b4e28ca9e8b2", "end": {"col": 76, "line": 1370, "offset": 67245}, "start": {"col": 44, "line": 1370, "offset": 67213}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "insecure-app/snyk.sarif", "start": {"col": 34, "line": 1370, "offset": 67203}}, {"check_id": "yaml.kubernetes.security.run-as-non-root.run-as-non-root", "end": {"col": 9, "line": 17, "offset": 312}, "extra": {"engine_kind": "OSS", "fingerprint": "3302f4679b677441ee2e4f843fe636546de78ccbdf7ffa5b66486a65526a675e1ad0c1989e87283307f8e9b2170714659820d02ad476142b371afd41824422ab_0", "fix": "spec:\n      securityContext:\n        runAsNonRoot: true #", "is_ignored": false, "lines": "    spec:", "message": "When running containers in Kubernetes, it's important to ensure that they  are properly secured to prevent privilege escalation attacks.  One potential vulnerability is when a container is allowed to run  applications as the root user, which could allow an attacker to gain  access to sensitive resources. To mitigate this risk, it's recommended to  add a `securityContext` to the container, with the parameter `runAsNonRoot`  set to `true`. This will ensure that the container runs as a non-root user,  limiting the damage that could be caused by any potential attacks. By  adding a `securityContext` to the container in your Kubernetes pod, you can  help to ensure that your containerized applications are more secure and  less vulnerable to privilege escalation attacks.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-250: Execution with Unnecessary Privileges"], "impact": "LOW", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A05:2021 - Security Misconfiguration", "A06:2017 - Security Misconfiguration"], "references": ["https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/", "https://kubernetes.io/docs/concepts/policy/pod-security-policy/", "https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html#rule-2-set-a-user"], "semgrep.dev": {"rule": {"origin": "community", "r_id": 10134, "rule_id": "ZqUqeK", "rv_id": 835331, "url": "https://semgrep.dev/playground/r/2KT7O6O/yaml.kubernetes.security.run-as-non-root.run-as-non-root", "version_id": "2KT7O6O"}}, "shortlink": "https://sg.run/dgP5", "source": "https://semgrep.dev/r/yaml.kubernetes.security.run-as-non-root.run-as-non-root", "subcategory": ["audit"], "technology": ["kubernetes"], "vulnerability_class": ["Improper Authorization"]}, "metavars": {"$1": {"abstract_content": "spec", "end": {"col": 5, "line": 1, "offset": 4}, "start": {"col": 1, "line": 1, "offset": 0}}, "$SPEC": {"abstract_content": "spec", "end": {"col": 9, "line": 17, "offset": 312}, "start": {"col": 5, "line": 17, "offset": 308}}}, "severity": "INFO", "validation_state": "NO_VALIDATOR"}, "path": "insecure-chart/templates/busybox.yaml", "start": {"col": 5, "line": 17, "offset": 308}}, {"check_id": "yaml.kubernetes.security.allow-privilege-escalation-no-securitycontext.allow-privilege-escalation-no-securitycontext", "end": {"col": 13, "line": 19, "offset": 344}, "extra": {"engine_kind": "OSS", "fingerprint": "a48a700ff4af7c51c6c89eeda133bc962da19537ab07ae0c31a3e52fa481f4483b37ae55047243392d0f979a5e17ee48f6a31f9e980c15636bb31f6068cc41ac_0", "fix": "securityContext:\n          allowPrivilegeEscalation: false\n        name", "is_ignored": false, "lines": "      - name: busybox", "message": "In Kubernetes, each pod runs in its own isolated environment with its own set of security policies. However, certain container images may contain `setuid` or `setgid` binaries that could allow an attacker to perform privilege escalation and gain access to sensitive resources. To mitigate this risk, it's recommended to add a `securityContext` to the container in the pod, with the parameter `allowPrivilegeEscalation` set to `false`. This will prevent the container from running any privileged processes and limit the impact of any potential attacks. By adding a `securityContext` to your Kubernetes pod, you can help to ensure that your containerized applications are more secure and less vulnerable to privilege escalation attacks.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-732: Incorrect Permission Assignment for Critical Resource"], "cwe2021-top25": true, "impact": "MEDIUM", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "MEDIUM", "owasp": ["A05:2021 - Security Misconfiguration", "A06:2017 - Security Misconfiguration"], "references": ["https://kubernetes.io/docs/concepts/policy/pod-security-policy/#privilege-escalation", "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/", "https://www.kernel.org/doc/Documentation/prctl/no_new_privs.txt", "https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html#rule-4-add-no-new-privileges-flag"], "semgrep.dev": {"rule": {"origin": "community", "r_id": 47276, "rule_id": "WAU5J6", "rv_id": 835317, "url": "https://semgrep.dev/playground/r/RGTKxwB/yaml.kubernetes.security.allow-privilege-escalation-no-securitycontext.allow-privilege-escalation-no-securitycontext", "version_id": "RGTKxwB"}}, "shortlink": "https://sg.run/eleR", "source": "https://semgrep.dev/r/yaml.kubernetes.security.allow-privilege-escalation-no-securitycontext.allow-privilege-escalation-no-securitycontext", "subcategory": ["vuln"], "technology": ["kubernetes"], "vulnerability_class": ["Improper Authorization"]}, "metavars": {"$CONTAINER": {"abstract_content": "busybox", "end": {"col": 22, "line": 19, "offset": 353}, "start": {"col": 15, "line": 19, "offset": 346}}, "$NAME": {"abstract_content": "name", "end": {"col": 13, "line": 19, "offset": 344}, "start": {"col": 9, "line": 19, "offset": 340}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "insecure-chart/templates/busybox.yaml", "start": {"col": 9, "line": 19, "offset": 340}}, {"check_id": "yaml.kubernetes.security.run-as-non-root.run-as-non-root", "end": {"col": 9, "line": 16, "offset": 364}, "extra": {"engine_kind": "OSS", "fingerprint": "aecd9bc14da55ad92c0e9f7a736c60d78bfe9d474551beb8606b92da97641b6af609317b6d0a64e78230567359a2a9889b5bd3ae0b3615997a0dd2adcf7ce4b0_0", "fix": "spec:\n      securityContext:\n        runAsNonRoot: true #", "is_ignored": false, "lines": "    spec:", "message": "When running containers in Kubernetes, it's important to ensure that they  are properly secured to prevent privilege escalation attacks.  One potential vulnerability is when a container is allowed to run  applications as the root user, which could allow an attacker to gain  access to sensitive resources. To mitigate this risk, it's recommended to  add a `securityContext` to the container, with the parameter `runAsNonRoot`  set to `true`. This will ensure that the container runs as a non-root user,  limiting the damage that could be caused by any potential attacks. By  adding a `securityContext` to the container in your Kubernetes pod, you can  help to ensure that your containerized applications are more secure and  less vulnerable to privilege escalation attacks.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-250: Execution with Unnecessary Privileges"], "impact": "LOW", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A05:2021 - Security Misconfiguration", "A06:2017 - Security Misconfiguration"], "references": ["https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/", "https://kubernetes.io/docs/concepts/policy/pod-security-policy/", "https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html#rule-2-set-a-user"], "semgrep.dev": {"rule": {"origin": "community", "r_id": 10134, "rule_id": "ZqUqeK", "rv_id": 835331, "url": "https://semgrep.dev/playground/r/2KT7O6O/yaml.kubernetes.security.run-as-non-root.run-as-non-root", "version_id": "2KT7O6O"}}, "shortlink": "https://sg.run/dgP5", "source": "https://semgrep.dev/r/yaml.kubernetes.security.run-as-non-root.run-as-non-root", "subcategory": ["audit"], "technology": ["kubernetes"], "vulnerability_class": ["Improper Authorization"]}, "metavars": {"$1": {"abstract_content": "spec", "end": {"col": 5, "line": 1, "offset": 4}, "start": {"col": 1, "line": 1, "offset": 0}}, "$SPEC": {"abstract_content": "spec", "end": {"col": 9, "line": 16, "offset": 364}, "start": {"col": 5, "line": 16, "offset": 360}}}, "severity": "INFO", "validation_state": "NO_VALIDATOR"}, "path": "insecure-chart/templates/insecure-app.yaml", "start": {"col": 5, "line": 16, "offset": 360}}, {"check_id": "yaml.kubernetes.security.privileged-container.privileged-container", "end": {"col": 42, "line": 29, "offset": 873}, "extra": {"engine_kind": "OSS", "fingerprint": "8d8d14c31ce0b4adf0e8554f956c7a41ec94f13ad055f4ece2cb0b87d686c8b738020157487eef0b9e5a722092576c68524c0d9200bff9f851caba9f6fd196c4_0", "is_ignored": false, "lines": "      - name: {{ .Values.insecureApp.appName }}\n        image: \"{{ .Values.insecureApp.image.repository }}:{{ .Values.insecureApp.image.tag }}\"\n        env:\n        - name: AWS_ACCESS_KEY_ID\n          value: AKIA2JAPX77RGLB664VE\n        - name: AWS_SECRET_ACCESS_KEY\n          value: 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\n        securityContext:\n          privileged: true\n        volumeMounts:                   \n        - name: docker-socket\n          mountPath: /var/run/docker.sock", "message": "Container or pod is running in privileged mode. This grants the container the equivalent of root capabilities on the host machine. This can lead to container escapes, privilege escalation, and other security concerns. Remove the 'privileged' key to disable this capability.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-250: Execution with Unnecessary Privileges"], "impact": "MEDIUM", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "MEDIUM", "references": ["https://kubernetes.io/docs/concepts/policy/pod-security-policy/#privileged", "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/", "https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html"], "semgrep.dev": {"rule": {"origin": "community", "r_id": 10058, "rule_id": "oqUz2p", "rv_id": 835326, "url": "https://semgrep.dev/playground/r/YDTlb8W/yaml.kubernetes.security.privileged-container.privileged-container", "version_id": "YDTlb8W"}}, "shortlink": "https://sg.run/Ygr5", "source": "https://semgrep.dev/r/yaml.kubernetes.security.privileged-container.privileged-container", "subcategory": ["vuln"], "technology": ["kubernetes"], "vulnerability_class": ["Improper Authorization"]}, "metavars": {}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "insecure-chart/templates/insecure-app.yaml", "start": {"col": 9, "line": 18, "offset": 392}}, {"check_id": "generic.secrets.security.detected-aws-access-key-id-value.detected-aws-access-key-id-value", "end": {"col": 38, "line": 22, "offset": 612}, "extra": {"engine_kind": "OSS", "fingerprint": "ba1eb8f472ad179589a1a9121d0766ca94d347074ca129508802d4537dae2c423d53533f10e88538157501b54215abf7a7d0b8b024b182219f664bbd8111d6a4_0", "is_ignored": false, "lines": "          value: AKIA2JAPX77RGLB664VE", "message": "AWS Access Key ID Value detected. This is a sensitive credential and should not be hardcoded here. Instead, read this value from an environment variable or keep it in a separate, private file.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-798: Use of Hard-coded Credentials"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A07:2021 - Identification and Authentication Failures"], "references": ["https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures"], "semgrep.dev": {"rule": {"origin": "community", "r_id": 9048, "rule_id": "oqUevO", "rv_id": 833757, "url": "https://semgrep.dev/playground/r/GxTDEyv/generic.secrets.security.detected-aws-access-key-id-value.detected-aws-access-key-id-value", "version_id": "GxTDEyv"}}, "shortlink": "https://sg.run/GeD1", "source": "https://semgrep.dev/r/generic.secrets.security.detected-aws-access-key-id-value.detected-aws-access-key-id-value", "source-rule-url": "https://github.com/grab/secret-scanner/blob/master/scanner/signatures/pattern.go", "subcategory": ["audit"], "technology": ["secrets", "aws"], "vulnerability_class": ["Hard-coded Secrets"]}, "metavars": {"$1": {"abstract_content": "AKIA", "end": {"col": 22, "line": 22, "offset": 596}, "start": {"col": 18, "line": 22, "offset": 592}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "insecure-chart/templates/insecure-app.yaml", "start": {"col": 18, "line": 22, "offset": 592}}, {"check_id": "yaml.kubernetes.security.allow-privilege-escalation.allow-privilege-escalation", "end": {"col": 24, "line": 25, "offset": 732}, "extra": {"engine_kind": "OSS", "fingerprint": "776c179c073a251128c9a229b958fb3881849cef53c32d7c8b5634da2885d6373e79e7a39068a1679423ccd0b409c0620683f9a0c95d65177fb897fb48ffd794_0", "fix": "securityContext:\n          allowPrivilegeEscalation: false #", "is_ignored": false, "lines": "        securityContext:", "message": "In Kubernetes, each pod runs in its own isolated environment with its own set of security policies. However, certain container images may contain `setuid` or `setgid` binaries that could allow an attacker to perform privilege escalation and gain access to sensitive resources. To mitigate this risk, it's recommended to add a `securityContext` to the container in the pod, with the parameter `allowPrivilegeEscalation` set to `false`. This will prevent the container from running any privileged processes and limit the impact of any potential attacks. By adding the `allowPrivilegeEscalation` parameter to your the `securityContext`, you can help to ensure that your containerized applications are more secure and less vulnerable to privilege escalation attacks.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-732: Incorrect Permission Assignment for Critical Resource"], "cwe2021-top25": true, "impact": "MEDIUM", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "MEDIUM", "owasp": ["A05:2021 - Security Misconfiguration", "A06:2017 - Security Misconfiguration"], "references": ["https://kubernetes.io/docs/concepts/policy/pod-security-policy/#privilege-escalation", "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/", "https://www.kernel.org/doc/Documentation/prctl/no_new_privs.txt", "https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html#rule-4-add-no-new-privileges-flag"], "semgrep.dev": {"rule": {"origin": "community", "r_id": 10057, "rule_id": "6JUqEO", "rv_id": 835319, "url": "https://semgrep.dev/playground/r/BjTeLG4/yaml.kubernetes.security.allow-privilege-escalation.allow-privilege-escalation", "version_id": "BjTeLG4"}}, "shortlink": "https://sg.run/ljp6", "source": "https://semgrep.dev/r/yaml.kubernetes.security.allow-privilege-escalation.allow-privilege-escalation", "subcategory": ["vuln"], "technology": ["kubernetes"], "vulnerability_class": ["Improper Authorization"]}, "metavars": {"$1": {"abstract_content": "securityContext", "end": {"col": 16, "line": 1, "offset": 15}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CONTAINER": {"abstract_content": "(())", "end": {"col": 47, "line": 18, "offset": 430}, "start": {"col": 15, "line": 18, "offset": 398}}, "$SC": {"abstract_content": "securityContext", "end": {"col": 24, "line": 25, "offset": 732}, "start": {"col": 9, "line": 25, "offset": 717}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "insecure-chart/templates/insecure-app.yaml", "start": {"col": 9, "line": 25, "offset": 717}}, {"check_id": "yaml.kubernetes.security.exposing-docker-socket-hostpath.exposing-docker-socket-hostpath", "end": {"col": 37, "line": 33, "offset": 996}, "extra": {"engine_kind": "OSS", "fingerprint": "7a6331004e7b6359a35200b986c57fc54a82ffc3d1eb71848fd4606545dfb3d195d9a1edd879c8d74c12364291a00adef95be1779caead61655b0590e63d01a9_0", "is_ignored": false, "lines": "        hostPath:\n          path: /var/run/docker.sock", "message": "Exposing host's Docker socket to containers via a volume. The owner of this socket is root. Giving someone access to it is equivalent to giving unrestricted root access to your host. Remove 'docker.sock' from hostpath to prevent this.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-250: Execution with Unnecessary Privileges"], "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "references": ["https://kubernetes.io/docs/concepts/storage/volumes/#hostpath", "https://kubernetes.io/docs/concepts/policy/pod-security-policy/#volumes-and-file-systems", "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/", "https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html#rule-1-do-not-expose-the-docker-daemon-socket-even-to-the-containers"], "semgrep.dev": {"rule": {"origin": "community", "r_id": 10133, "rule_id": "d8Uz6v", "rv_id": 835321, "url": "https://semgrep.dev/playground/r/WrTdn62/yaml.kubernetes.security.exposing-docker-socket-hostpath.exposing-docker-socket-hostpath", "version_id": "WrTdn62"}}, "shortlink": "https://sg.run/v0pR", "source": "https://semgrep.dev/r/yaml.kubernetes.security.exposing-docker-socket-hostpath.exposing-docker-socket-hostpath", "subcategory": ["vuln"], "technology": ["kubernetes"], "vulnerability_class": ["Improper Authorization"]}, "metavars": {}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "insecure-chart/templates/insecure-app.yaml", "start": {"col": 9, "line": 32, "offset": 950}}, {"check_id": "yaml.kubernetes.security.run-as-non-root.run-as-non-root", "end": {"col": 9, "line": 16, "offset": 434}, "extra": {"engine_kind": "OSS", "fingerprint": "3a55f533ac5a5a36509690fa17d989dd74b859c9205068f60ce9ebc206764744c02e0240842db0f7d7fc4dc7b2cab157033ce576fdc1904bd58eb04f84b184ec_0", "fix": "spec:\n      securityContext:\n        runAsNonRoot: true #", "is_ignored": false, "lines": "    spec:", "message": "When running containers in Kubernetes, it's important to ensure that they  are properly secured to prevent privilege escalation attacks.  One potential vulnerability is when a container is allowed to run  applications as the root user, which could allow an attacker to gain  access to sensitive resources. To mitigate this risk, it's recommended to  add a `securityContext` to the container, with the parameter `runAsNonRoot`  set to `true`. This will ensure that the container runs as a non-root user,  limiting the damage that could be caused by any potential attacks. By  adding a `securityContext` to the container in your Kubernetes pod, you can  help to ensure that your containerized applications are more secure and  less vulnerable to privilege escalation attacks.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-250: Execution with Unnecessary Privileges"], "impact": "LOW", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A05:2021 - Security Misconfiguration", "A06:2017 - Security Misconfiguration"], "references": ["https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/", "https://kubernetes.io/docs/concepts/policy/pod-security-policy/", "https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html#rule-2-set-a-user"], "semgrep.dev": {"rule": {"origin": "community", "r_id": 10134, "rule_id": "ZqUqeK", "rv_id": 835331, "url": "https://semgrep.dev/playground/r/2KT7O6O/yaml.kubernetes.security.run-as-non-root.run-as-non-root", "version_id": "2KT7O6O"}}, "shortlink": "https://sg.run/dgP5", "source": "https://semgrep.dev/r/yaml.kubernetes.security.run-as-non-root.run-as-non-root", "subcategory": ["audit"], "technology": ["kubernetes"], "vulnerability_class": ["Improper Authorization"]}, "metavars": {"$1": {"abstract_content": "spec", "end": {"col": 5, "line": 1, "offset": 4}, "start": {"col": 1, "line": 1, "offset": 0}}, "$SPEC": {"abstract_content": "spec", "end": {"col": 9, "line": 16, "offset": 434}, "start": {"col": 5, "line": 16, "offset": 430}}}, "severity": "INFO", "validation_state": "NO_VALIDATOR"}, "path": "insecure-chart/templates/workload-security-evaluator.yaml", "start": {"col": 5, "line": 16, "offset": 430}}, {"check_id": "yaml.kubernetes.security.privileged-container.privileged-container", "end": {"col": 30, "line": 29, "offset": 966}, "extra": {"engine_kind": "OSS", "fingerprint": "ffd554b207fb80ce294cc034390d4474858d4264f036ada1a1c11e8b6925b9d1d3231425104899b500b80be005ad1001395576ee17aff2683b9cf73520697663_0", "is_ignored": false, "lines": "      - name: {{ .Values.workloadSecurityEvaluator.appName }}\n        image: \"{{ .Values.workloadSecurityEvaluator.image.repository }}:{{ .Values.workloadSecurityEvaluator.image.tag }}\"\n        env:\n        - name: AWS_ACCESS_KEY_ID\n          value: AKIA2JAPX77RGLB664VE\n        - name: AWS_SECRET_ACCESS_KEY\n          value: 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\n        securityContext:\n          privileged: true\n        volumeMounts:\n        - mountPath: /var/run/docker.sock\n          name: docker-socket", "message": "Container or pod is running in privileged mode. This grants the container the equivalent of root capabilities on the host machine. This can lead to container escapes, privilege escalation, and other security concerns. Remove the 'privileged' key to disable this capability.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-250: Execution with Unnecessary Privileges"], "impact": "MEDIUM", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "MEDIUM", "references": ["https://kubernetes.io/docs/concepts/policy/pod-security-policy/#privileged", "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/", "https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html"], "semgrep.dev": {"rule": {"origin": "community", "r_id": 10058, "rule_id": "oqUz2p", "rv_id": 835326, "url": "https://semgrep.dev/playground/r/YDTlb8W/yaml.kubernetes.security.privileged-container.privileged-container", "version_id": "YDTlb8W"}}, "shortlink": "https://sg.run/Ygr5", "source": "https://semgrep.dev/r/yaml.kubernetes.security.privileged-container.privileged-container", "subcategory": ["vuln"], "technology": ["kubernetes"], "vulnerability_class": ["Improper Authorization"]}, "metavars": {}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "insecure-chart/templates/workload-security-evaluator.yaml", "start": {"col": 9, "line": 18, "offset": 462}}, {"check_id": "generic.secrets.security.detected-aws-access-key-id-value.detected-aws-access-key-id-value", "end": {"col": 38, "line": 22, "offset": 724}, "extra": {"engine_kind": "OSS", "fingerprint": "d5ec8967dc8f57fcd421997dda6a0abac3a0cc762e6534246a83ffc2a37741ad06e18ee176aa6dbbc85c400080f78f59914c17b2bb32704ae8b360092860feca_0", "is_ignored": false, "lines": "          value: AKIA2JAPX77RGLB664VE", "message": "AWS Access Key ID Value detected. This is a sensitive credential and should not be hardcoded here. Instead, read this value from an environment variable or keep it in a separate, private file.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-798: Use of Hard-coded Credentials"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A07:2021 - Identification and Authentication Failures"], "references": ["https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures"], "semgrep.dev": {"rule": {"origin": "community", "r_id": 9048, "rule_id": "oqUevO", "rv_id": 833757, "url": "https://semgrep.dev/playground/r/GxTDEyv/generic.secrets.security.detected-aws-access-key-id-value.detected-aws-access-key-id-value", "version_id": "GxTDEyv"}}, "shortlink": "https://sg.run/GeD1", "source": "https://semgrep.dev/r/generic.secrets.security.detected-aws-access-key-id-value.detected-aws-access-key-id-value", "source-rule-url": "https://github.com/grab/secret-scanner/blob/master/scanner/signatures/pattern.go", "subcategory": ["audit"], "technology": ["secrets", "aws"], "vulnerability_class": ["Hard-coded Secrets"]}, "metavars": {"$1": {"abstract_content": "AKIA", "end": {"col": 22, "line": 22, "offset": 708}, "start": {"col": 18, "line": 22, "offset": 704}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "insecure-chart/templates/workload-security-evaluator.yaml", "start": {"col": 18, "line": 22, "offset": 704}}, {"check_id": "yaml.kubernetes.security.allow-privilege-escalation.allow-privilege-escalation", "end": {"col": 24, "line": 25, "offset": 844}, "extra": {"engine_kind": "OSS", "fingerprint": "7021c010b8d0b11136f68b6c85d57b318861ada3d7a906b6942146314eb665dcc6e36826b1deb04c3c890bc829879387ca5ebfcd9d6960554f48900e55355b8f_0", "fix": "securityContext:\n          allowPrivilegeEscalation: false #", "is_ignored": false, "lines": "        securityContext:", "message": "In Kubernetes, each pod runs in its own isolated environment with its own set of security policies. However, certain container images may contain `setuid` or `setgid` binaries that could allow an attacker to perform privilege escalation and gain access to sensitive resources. To mitigate this risk, it's recommended to add a `securityContext` to the container in the pod, with the parameter `allowPrivilegeEscalation` set to `false`. This will prevent the container from running any privileged processes and limit the impact of any potential attacks. By adding the `allowPrivilegeEscalation` parameter to your the `securityContext`, you can help to ensure that your containerized applications are more secure and less vulnerable to privilege escalation attacks.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-732: Incorrect Permission Assignment for Critical Resource"], "cwe2021-top25": true, "impact": "MEDIUM", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "MEDIUM", "owasp": ["A05:2021 - Security Misconfiguration", "A06:2017 - Security Misconfiguration"], "references": ["https://kubernetes.io/docs/concepts/policy/pod-security-policy/#privilege-escalation", "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/", "https://www.kernel.org/doc/Documentation/prctl/no_new_privs.txt", "https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html#rule-4-add-no-new-privileges-flag"], "semgrep.dev": {"rule": {"origin": "community", "r_id": 10057, "rule_id": "6JUqEO", "rv_id": 835319, "url": "https://semgrep.dev/playground/r/BjTeLG4/yaml.kubernetes.security.allow-privilege-escalation.allow-privilege-escalation", "version_id": "BjTeLG4"}}, "shortlink": "https://sg.run/ljp6", "source": "https://semgrep.dev/r/yaml.kubernetes.security.allow-privilege-escalation.allow-privilege-escalation", "subcategory": ["vuln"], "technology": ["kubernetes"], "vulnerability_class": ["Improper Authorization"]}, "metavars": {"$1": {"abstract_content": "securityContext", "end": {"col": 16, "line": 1, "offset": 15}, "start": {"col": 1, "line": 1, "offset": 0}}, "$CONTAINER": {"abstract_content": "(())", "end": {"col": 61, "line": 18, "offset": 514}, "start": {"col": 15, "line": 18, "offset": 468}}, "$SC": {"abstract_content": "securityContext", "end": {"col": 24, "line": 25, "offset": 844}, "start": {"col": 9, "line": 25, "offset": 829}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "insecure-chart/templates/workload-security-evaluator.yaml", "start": {"col": 9, "line": 25, "offset": 829}}, {"check_id": "yaml.kubernetes.security.exposing-docker-socket-hostpath.exposing-docker-socket-hostpath", "end": {"col": 37, "line": 32, "offset": 1036}, "extra": {"engine_kind": "OSS", "fingerprint": "b0fa2105cf388aaf61f7d9b9f73a03a2342c2992b3a938f4e64785c6ec896ee80151e782d77db28ca4efc171718fee4f95c80bb416c5f8c965787ea2faff9d45_0", "is_ignored": false, "lines": "      - hostPath:\n          path: /var/run/docker.sock", "message": "Exposing host's Docker socket to containers via a volume. The owner of this socket is root. Giving someone access to it is equivalent to giving unrestricted root access to your host. Remove 'docker.sock' from hostpath to prevent this.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-250: Execution with Unnecessary Privileges"], "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "references": ["https://kubernetes.io/docs/concepts/storage/volumes/#hostpath", "https://kubernetes.io/docs/concepts/policy/pod-security-policy/#volumes-and-file-systems", "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/", "https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html#rule-1-do-not-expose-the-docker-daemon-socket-even-to-the-containers"], "semgrep.dev": {"rule": {"origin": "community", "r_id": 10133, "rule_id": "d8Uz6v", "rv_id": 835321, "url": "https://semgrep.dev/playground/r/WrTdn62/yaml.kubernetes.security.exposing-docker-socket-hostpath.exposing-docker-socket-hostpath", "version_id": "WrTdn62"}}, "shortlink": "https://sg.run/v0pR", "source": "https://semgrep.dev/r/yaml.kubernetes.security.exposing-docker-socket-hostpath.exposing-docker-socket-hostpath", "subcategory": ["vuln"], "technology": ["kubernetes"], "vulnerability_class": ["Improper Authorization"]}, "metavars": {}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "insecure-chart/templates/workload-security-evaluator.yaml", "start": {"col": 9, "line": 31, "offset": 990}}, {"check_id": "dockerfile.security.missing-user-entrypoint.missing-user-entrypoint", "end": {"col": 38, "line": 7, "offset": 167}, "extra": {"engine_kind": "OSS", "fingerprint": "8a9ae537c70377699ac7b95add8f39d7bc1192dbb0a0a2e524f7a4e126adfa3e0bcc6c074eeb891021d031d42e016675c69dd491f4bc4116bef9ab0dba840233_0", "fix": "USER non-root\nENTRYPOINT [\"java\",\"-jar\",\"/app.jar\"]", "is_ignored": false, "lines": "ENTRYPOINT [\"java\",\"-jar\",\"/app.jar\"]", "message": "By not specifying a USER, a program in the container may run as 'root'. This is a security hazard. If an attacker can control a process running as root, they may have control over the container. Ensure that the last USER in a Dockerfile is a USER other than 'root'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-269: Improper Privilege Management"], "impact": "MEDIUM", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A04:2021 - Insecure Design"], "references": ["https://owasp.org/Top10/A04_2021-Insecure_Design"], "semgrep.dev": {"rule": {"origin": "community", "r_id": 47272, "rule_id": "ReUW9E", "rv_id": 928285, "url": "https://semgrep.dev/playground/r/WrTYvkG/dockerfile.security.missing-user-entrypoint.missing-user-entrypoint", "version_id": "WrTYvkG"}}, "shortlink": "https://sg.run/k281", "source": "https://semgrep.dev/r/dockerfile.security.missing-user-entrypoint.missing-user-entrypoint", "subcategory": ["audit"], "technology": ["dockerfile"], "vulnerability_class": ["Improper Authorization"]}, "metavars": {"$...VARS": {"abstract_content": "[\"java\"\"-jar\"\"/app.jar\"]", "end": {"col": 38, "line": 7, "offset": 167}, "start": {"col": 12, "line": 7, "offset": 141}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "insecure-java/Dockerfile", "start": {"col": 1, "line": 7, "offset": 130}}, {"check_id": "java.lang.security.audit.object-deserialization.object-deserialization", "end": {"col": 91, "line": 16, "offset": 672}, "extra": {"engine_kind": "OSS", "fingerprint": "774378c1d79256d5bab570074c4a6bf6703250887fca212f1a813ada0f8d5de5e786961d4f0b746e5f6292cc9b46c41ca4308c9367ddf6932267ba763012620e_0", "is_ignored": false, "lines": "            ObjectInputStream ois = new ObjectInputStream(new ByteArrayInputStream(data));", "message": "Found object deserialization using ObjectInputStream. Deserializing entire Java objects is dangerous because malicious actors can create Java object streams with unintended consequences. Ensure that the objects being deserialized are not user-controlled. If this must be done, consider using HMACs to sign the data stream to make sure it is not tampered with, or consider only transmitting object fields and populating a new object.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-502: Deserialization of Untrusted Data"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A08:2017 - Insecure Deserialization", "A08:2021 - Software and Data Integrity Failures"], "references": ["https://www.owasp.org/index.php/Deserialization_of_untrusted_data", "https://www.oracle.com/java/technologies/javase/seccodeguide.html#8"], "semgrep.dev": {"rule": {"origin": "community", "r_id": 9181, "rule_id": "GdU7py", "rv_id": 833957, "url": "https://semgrep.dev/playground/r/JdTlr9A/java.lang.security.audit.object-deserialization.object-deserialization", "version_id": "JdTlr9A"}}, "shortlink": "https://sg.run/Ek0A", "source": "https://semgrep.dev/r/java.lang.security.audit.object-deserialization.object-deserialization", "source-rule-url": "https://find-sec-bugs.github.io/bugs.htm#OBJECT_DESERIALIZATION", "subcategory": ["audit"], "technology": ["java"], "vulnerability_class": ["Insecure Deserialization "]}, "metavars": {}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "insecure-java/src/main/java/com/example/insecurejava/UnsafeDeserializationController.java", "start": {"col": 13, "line": 16, "offset": 594}}, {"check_id": "java.spring.security.objectinputstream-deserialization-spring.objectinputstream-deserialization-spring", "end": {"col": 89, "line": 16, "offset": 670}, "extra": {"dataflow_trace": {"intermediate_vars": [{"content": "data", "location": {"end": {"col": 81, "line": 14, "offset": 564}, "path": "insecure-java/src/main/java/com/example/insecurejava/UnsafeDeserializationController.java", "start": {"col": 77, "line": 14, "offset": 560}}}], "taint_sink": ["CliLoc", [{"end": {"col": 89, "line": 16, "offset": 670}, "path": "insecure-java/src/main/java/com/example/insecurejava/UnsafeDeserializationController.java", "start": {"col": 59, "line": 16, "offset": 640}}, "new ByteArrayInputStream(data)"]], "taint_source": ["CliLoc", [{"end": {"col": 81, "line": 14, "offset": 564}, "path": "insecure-java/src/main/java/com/example/insecurejava/UnsafeDeserializationController.java", "start": {"col": 77, "line": 14, "offset": 560}}, "data"]]}, "engine_kind": "OSS", "fingerprint": "a2614ff795db8683648336f8eeaa7a035f28692827db3868fc6171fee7edd70b3e8f2fcbabd9cac255526f5380ad5c95d1b5d8fedbde95ae1f2ca066d4970758_0", "is_ignored": false, "lines": "            ObjectInputStream ois = new ObjectInputStream(new ByteArrayInputStream(data));", "message": "The application may convert user-controlled data into an object, which can lead to an insecure deserialization vulnerability. An attacker can create a malicious serialized object, pass it to the application, and take advantage of the deserialization process to perform Denial-of-service (DoS), Remote code execution (RCE), or bypass access control measures. To prevent this vulnerability, leverage data formats such as JSON or XML as safer alternatives. If you need to deserialize user input in a specific format, consider digitally signing the data before serialization to prevent tampering. For more information, see: [Deserialization prevention](https://cheatsheetseries.owasp.org/cheatsheets/Deserialization_Cheat_Sheet.html) We do not recommend deserializing untrusted data with the `ObjectInputStream`. If you must, you can try overriding the `ObjectInputStream#resolveClass()` method or using a safe replacement for the generic `readObject()` method.", "metadata": {"category": "security", "confidence": "HIGH", "cwe": ["CWE-502: Deserialization of Untrusted Data"], "cwe2020-top25": true, "cwe2021-top25": true, "cwe2022-top25": true, "display-name": "Unsafe Deserialization with Spring", "functional-categories": ["deserialization::sink::load-object::apache.commons", "deserialization::sink::load-object::java.io", "web::source::cookie::Spring", "web::source::header::Spring", "web::source::http-body::Spring", "web::source::http-params::Spring", "web::source::url-path-params::Spring"], "impact": "HIGH", "license": "Copyright 2023 Semgrep, Inc.", "likelihood": "MEDIUM", "owasp": ["A08:2017 - Insecure Deserialization", "A08:2021 - Software and Data Integrity Failures"], "references": ["https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures"], "semgrep.dev": {"rule": {"origin": "pro_rules", "r_id": 46836, "rule_id": "x8UbG3", "rv_id": 924244, "url": "https://semgrep.dev/playground/r/DkT2jXo/java.spring.security.objectinputstream-deserialization-spring.objectinputstream-deserialization-spring", "version_id": "DkT2jXo"}}, "shortlink": "https://sg.run/n1rY", "source": "https://semgrep.dev/r/java.spring.security.objectinputstream-deserialization-spring.objectinputstream-deserialization-spring", "subcategory": ["vuln"], "supersedes": ["java.servlets.security.objectinputstream-deserialization-servlets.objectinputstream-deserialization-servlets"], "technology": ["Spring", "java"], "vulnerability_class": ["Insecure Deserialization "]}, "metavars": {"$1": {"abstract_content": "RequestBody", "end": {"col": 12, "line": 1, "offset": 11}, "start": {"col": 1, "line": 1, "offset": 0}}, "$IN": {"abstract_content": "new ByteArrayInputStream(data)", "end": {"col": 89, "line": 16, "offset": 670}, "start": {"col": 59, "line": 16, "offset": 640}}, "$METHOD": {"abstract_content": "unsafeDeserialization", "end": {"col": 56, "line": 14, "offset": 539}, "start": {"col": 35, "line": 14, "offset": 518}}, "$REQ": {"abstract_content": "RequestBody", "end": {"col": 69, "line": 14, "offset": 552}, "start": {"col": 58, "line": 14, "offset": 541}}, "$RET": {"abstract_content": "ResponseEntity<String>", "end": {"col": 34, "line": 14, "offset": 517}, "start": {"col": 12, "line": 14, "offset": 495}}, "$SOURCE": {"abstract_content": "data", "end": {"col": 81, "line": 14, "offset": 564}, "start": {"col": 77, "line": 14, "offset": 560}}, "$TYPE": {"abstract_content": "byte[]", "end": {"col": 76, "line": 14, "offset": 559}, "start": {"col": 70, "line": 14, "offset": 553}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "insecure-java/src/main/java/com/example/insecurejava/UnsafeDeserializationController.java", "start": {"col": 59, "line": 16, "offset": 640}}, {"check_id": "java.lang.security.audit.active-debug-code-printstacktrace.active-debug-code-printstacktrace", "end": {"col": 32, "line": 20, "offset": 889}, "extra": {"engine_kind": "OSS", "fingerprint": "2f2eab275674c6639e50192e695448a7c772946f53353aaee757181220ac95afd0f966ae7a8030ed35c10335559cfd3dc575ef1b0469ca831144c249ce451bd9_0", "is_ignored": false, "lines": "            e.printStackTrace();", "message": "Possible active debug code detected. Deploying an application with debug code can create unintended entry points or expose sensitive information.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-489: Active Debug Code"], "functional-categories": ["debug::search::active-debug-code::java.lang"], "impact": "LOW", "license": "Copyright 2023 Semgrep, Inc.", "likelihood": "LOW", "owasp": ["A10:2004 - Insecure Configuration Management", "A06:2017 - Security Misconfiguration", "A05:2021 - Security Misconfiguration"], "references": ["https://cwe.mitre.org/data/definitions/489.html", "https://www.acunetix.com/vulnerabilities/web/stack-trace-disclosure-java/", "https://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/08-Testing_for_Error_Handling/02-Testing_for_Stack_Traces", "https://www.securecodewarrior.com/blog/coders-conquer-security-share-learn-series-information-exposure"], "semgrep.dev": {"rule": {"origin": "pro_rules", "r_id": 27144, "rule_id": "v8U0rZ", "rv_id": 850441, "url": "https://semgrep.dev/playground/r/9lTJDWJ/java.lang.security.audit.active-debug-code-printstacktrace.active-debug-code-printstacktrace", "version_id": "9lTJDWJ"}}, "shortlink": "https://sg.run/4K8z", "source": "https://semgrep.dev/r/java.lang.security.audit.active-debug-code-printstacktrace.active-debug-code-printstacktrace", "subcategory": ["audit"], "technology": ["java"], "vulnerability_class": ["Active Debug Code"]}, "metavars": {"$EXCEPTION": {"abstract_content": "e", "end": {"col": 14, "line": 20, "offset": 871}, "start": {"col": 13, "line": 20, "offset": 870}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "insecure-java/src/main/java/com/example/insecurejava/UnsafeDeserializationController.java", "start": {"col": 13, "line": 20, "offset": 870}}, {"check_id": "dockerfile.security.missing-user.missing-user", "end": {"col": 61, "line": 18, "offset": 434}, "extra": {"engine_kind": "OSS", "fingerprint": "17bfeb542b41e1a3b365f57addec89078df51ed337059333e17baea012db6a0ba27a2c6e96c39339de27f37a1f0d11dc59afe66507952280577e0c251121aea9_0", "fix": "USER non-root\nCMD [\"/bin/bash\", \"-c\", \"node init_db.js && node server.js\"]", "is_ignored": false, "lines": "CMD [\"/bin/bash\", \"-c\", \"node init_db.js && node server.js\"]", "message": "By not specifying a USER, a program in the container may run as 'root'. This is a security hazard. If an attacker can control a process running as root, they may have control over the container. Ensure that the last USER in a Dockerfile is a USER other than 'root'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-269: Improper Privilege Management"], "impact": "MEDIUM", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A04:2021 - Insecure Design"], "references": ["https://owasp.org/Top10/A04_2021-Insecure_Design"], "semgrep.dev": {"rule": {"origin": "community", "r_id": 20148, "rule_id": "AbUN06", "rv_id": 928286, "url": "https://semgrep.dev/playground/r/0bTpAQq/dockerfile.security.missing-user.missing-user", "version_id": "0bTpAQq"}}, "shortlink": "https://sg.run/Gbvn", "source": "https://semgrep.dev/r/dockerfile.security.missing-user.missing-user", "subcategory": ["audit"], "technology": ["dockerfile"], "vulnerability_class": ["Improper Authorization"]}, "metavars": {"$...VARS": {"abstract_content": "[\"/bin/bash\"\"-c\"\"node init_db.js && node server.js\"]", "end": {"col": 61, "line": 18, "offset": 434}, "start": {"col": 5, "line": 18, "offset": 378}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "insecure-js/Dockerfile", "start": {"col": 1, "line": 18, "offset": 374}}, {"check_id": "problem-based-packs.insecure-transport.js-node.using-http-server.using-http-server", "end": {"col": 20, "line": 11, "offset": 288}, "extra": {"engine_kind": "OSS", "fingerprint": "25f273fc22088aa83a6bcdb5e495f0d9abcc81ab7bb2c8840d8caef623755dee7582a03375f2b95a717319b7e6fe70f6767b0cd32f7a35aa4b8a869a33404094_0", "is_ignored": false, "lines": "const server = http.createServer((req, res) => {", "message": "Checks for any usage of http servers instead of https servers. Encourages the usage of https protocol instead of http, which does not have TLS and is therefore unencrypted. Using http can lead to man-in-the-middle attacks in which the attacker is able to read sensitive information.", "metadata": {"category": "security", "confidence": "LOW", "cwe": "CWE-319: Cleartext Transmission of Sensitive Information", "impact": "MEDIUM", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A02:2021 - Cryptographic Failures", "A03:2017 - Sensitive Data Exposure"], "references": ["https://nodejs.org/api/http.html#http_class_http_agent", "https://groups.google.com/g/rubyonrails-security/c/NCCsca7TEtY"], "semgrep.dev": {"rule": {"origin": "community", "r_id": 9430, "rule_id": "7KUQAE", "rv_id": 834340, "url": "https://semgrep.dev/playground/r/7ZTx97o/problem-based-packs.insecure-transport.js-node.using-http-server.using-http-server", "version_id": "7ZTx97o"}}, "shortlink": "https://sg.run/x1zL", "source": "https://semgrep.dev/r/problem-based-packs.insecure-transport.js-node.using-http-server.using-http-server", "subcategory": ["audit"], "technology": ["node.js"], "vulnerability": "Insecure Transport", "vulnerability_class": ["Mishandled Sensitive Information"]}, "metavars": {"$FUNC": {"abstract_content": "createServer", "end": {"col": 33, "line": 11, "offset": 301}, "start": {"col": 21, "line": 11, "offset": 289}}, "$HTTP": {"abstract_content": "http", "end": {"col": 20, "line": 11, "offset": 288}, "propagated_value": {"svalue_abstract_content": "require('http')", "svalue_end": {"col": 29, "line": 1, "offset": 28}, "svalue_start": {"col": 14, "line": 1, "offset": 13}}, "start": {"col": 16, "line": 11, "offset": 284}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "insecure-js/server.js", "start": {"col": 16, "line": 11, "offset": 284}}, {"check_id": "dockerfile.security.missing-user.missing-user", "end": {"col": 26, "line": 27, "offset": 1060}, "extra": {"engine_kind": "OSS", "fingerprint": "555290a284929b279e6f45a6514944a53073e36328d74be327eaa29f8d1e7c3df817bf90428c50fdb8b54a5c6e6f7c71f123e56a85e517ba94255a0823c69966_0", "fix": "USER non-root\nCMD [\"sleep\", \"infinity\"]", "is_ignored": false, "lines": "CMD [\"sleep\", \"infinity\"]", "message": "By not specifying a USER, a program in the container may run as 'root'. This is a security hazard. If an attacker can control a process running as root, they may have control over the container. Ensure that the last USER in a Dockerfile is a USER other than 'root'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-269: Improper Privilege Management"], "impact": "MEDIUM", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A04:2021 - Insecure Design"], "references": ["https://owasp.org/Top10/A04_2021-Insecure_Design"], "semgrep.dev": {"rule": {"origin": "community", "r_id": 20148, "rule_id": "AbUN06", "rv_id": 928286, "url": "https://semgrep.dev/playground/r/0bTpAQq/dockerfile.security.missing-user.missing-user", "version_id": "0bTpAQq"}}, "shortlink": "https://sg.run/Gbvn", "source": "https://semgrep.dev/r/dockerfile.security.missing-user.missing-user", "subcategory": ["audit"], "technology": ["dockerfile"], "vulnerability_class": ["Improper Authorization"]}, "metavars": {"$...VARS": {"abstract_content": "[\"sleep\"\"infinity\"]", "end": {"col": 26, "line": 27, "offset": 1060}, "start": {"col": 5, "line": 27, "offset": 1039}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "workload-security-evaluator/Dockerfile", "start": {"col": 1, "line": 27, "offset": 1035}}, {"check_id": "yaml.docker-compose.security.no-new-privileges.no-new-privileges", "end": {"col": 10, "line": 3, "offset": 32}, "extra": {"engine_kind": "OSS", "fingerprint": "b47157b1d64b1a76c53cc5dd1f06b3afde2735933d6d375b13958d5f51040eb23d0a6e752940e4da63cade63e2058ab1b74a19d612ba86ca358c6e8fbb6490c4_0", "is_ignored": false, "lines": "  datadog:", "message": "Service 'datadog' allows for privilege escalation via setuid or setgid binaries. Add 'no-new-privileges:true' in 'security_opt' to prevent this.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-732: Incorrect Permission Assignment for Critical Resource"], "cwe2021-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A05:2021 - Security Misconfiguration", "A06:2017 - Security Misconfiguration"], "references": ["https://raesene.github.io/blog/2019/06/01/docker-capabilities-and-no-new-privs/", "https://www.kernel.org/doc/Documentation/prctl/no_new_privs.txt", "https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html#rule-4-add-no-new-privileges-flag"], "semgrep.dev": {"rule": {"origin": "community", "r_id": 10054, "rule_id": "qNUoWr", "rv_id": 835301, "url": "https://semgrep.dev/playground/r/vdTOQ35/yaml.docker-compose.security.no-new-privileges.no-new-privileges", "version_id": "vdTOQ35"}}, "shortlink": "https://sg.run/0n8q", "source": "https://semgrep.dev/r/yaml.docker-compose.security.no-new-privileges.no-new-privileges", "subcategory": ["audit"], "technology": ["docker-compose"], "vulnerability_class": ["Improper Authorization"]}, "metavars": {"$SERVICE": {"abstract_content": "datadog", "end": {"col": 10, "line": 3, "offset": 32}, "start": {"col": 3, "line": 3, "offset": 25}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "workload-security-evaluator/docker-compose.yaml", "start": {"col": 3, "line": 3, "offset": 25}}, {"check_id": "yaml.docker-compose.security.writable-filesystem-service.writable-filesystem-service", "end": {"col": 10, "line": 3, "offset": 32}, "extra": {"engine_kind": "OSS", "fingerprint": "e9d9e08a46c082226f812a75426196affa743ba5a7a099525848865763a414f67eae5dedc077795dca06ad996e34491de37e3268cae1efe87a7c292e715b6d8d_0", "is_ignored": false, "lines": "  datadog:", "message": "Service 'datadog' is running with a writable root filesystem. This may allow malicious applications to download and run additional payloads, or modify container files. If an application inside a container has to save something temporarily consider using a tmpfs. Add 'read_only: true' to this service to prevent this.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-732: Incorrect Permission Assignment for Critical Resource"], "cwe2021-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A05:2021 - Security Misconfiguration", "A06:2017 - Security Misconfiguration"], "references": ["https://docs.docker.com/compose/compose-file/compose-file-v3/#domainname-hostname-ipc-mac_address-privileged-read_only-shm_size-stdin_open-tty-user-working_dir", "https://blog.atomist.com/security-of-docker-kubernetes/", "https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html#rule-8-set-filesystem-and-volumes-to-read-only"], "semgrep.dev": {"rule": {"origin": "community", "r_id": 10132, "rule_id": "v8U5vN", "rv_id": 835305, "url": "https://semgrep.dev/playground/r/ExTrWYr/yaml.docker-compose.security.writable-filesystem-service.writable-filesystem-service", "version_id": "ExTrWYr"}}, "shortlink": "https://sg.run/e4JE", "source": "https://semgrep.dev/r/yaml.docker-compose.security.writable-filesystem-service.writable-filesystem-service", "subcategory": ["audit"], "technology": ["docker-compose"], "vulnerability_class": ["Improper Authorization"]}, "metavars": {"$SERVICE": {"abstract_content": "datadog", "end": {"col": 10, "line": 3, "offset": 32}, "start": {"col": 3, "line": 3, "offset": 25}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "workload-security-evaluator/docker-compose.yaml", "start": {"col": 3, "line": 3, "offset": 25}}], "skipped_rules": [], "version": "1.96.0"}
